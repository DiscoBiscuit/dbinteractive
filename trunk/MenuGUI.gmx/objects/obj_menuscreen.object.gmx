<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gui_new( id )

window1 = gui_window_new( id , room_width/2 , room_height/2 , 256 , 256 )
gui_window_color( window1 , c_white , c_black)
gui_window_properties( window1, false, false, false )

button1 = gui_button_new( window1 ,-64,8,64,32, "Move" , func_movebutton )
button1.movement = 0
gui_button_color( button1 , c_ltgray , c_gray, c_black, c_black )

button2 = gui_button_new( window1 ,64,8,64,32, "Color" , func_none )
gui_button_color( button2 , c_ltgray , c_gray, c_black, c_black )
gui_button_clickfunc( button2 , func_coloparentwindow , c_blue, c_green )
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(gui_world_canclick(id))
{
    if(background_color==c_black){background_color=c_red}else{background_color=c_black}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gui_draw( id )
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var newid,buttonid;
newid = ds_list_size(windows)

// creates a new window and stores its value in an array for now
windowlist[newid] = gui_window_new( id , 64+round(random(room_width-128)) , 32+round(random(room_height-64)) , 128 , 64 )

// color that new window how we want
gui_window_color( windowlist[newid] , c_ltgray , c_black, c_dkgray )

// we can edit the object's variables directly as well
windowlist[newid].closeable = false


// create a new button and save it in a different array. Its parent is the window we created above
buttonid = newid*2
buttonlist[buttonid] = gui_button_new( windowlist[newid] ,-32,8,48,24, "Close" , func_closeparentwindow )
gui_button_color( buttonlist[buttonid] , c_aqua , c_blue, c_black, c_red )

buttonid = newid*2+1
buttonlist[buttonid] = gui_button_new( windowlist[newid] ,32,8,48,24, "Color" , func_none )
gui_button_color( buttonlist[buttonid] , c_red , c_maroon, c_black, c_aqua )
//the click function can be defined in the button creation script, but can also be defined seperately with this function, and can pass arguments through as well
gui_button_clickfunc( buttonlist[buttonid], func_coloparentwindow , c_orange, c_red, c_yellow )
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
