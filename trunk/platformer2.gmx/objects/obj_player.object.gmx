<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Platform Variables
yspeed = 0
xspeed = 0
maxyspeed = 10
maxxspeed = 4
onground = 0

//Multipliers
gravity_mult = 1
jump_mult = 1
friction_mult = 1

//Sprite Control
image_speed = 0.25
spr_dir = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//First, check for the ground underneath
if (collision_rectangle(bbox_left+2,bbox_top,bbox_right-2,bbox_bottom + yspeed,obj_world,1,1))
{
    onground = 1
}
else
{
    onground = 0
};

//If there isn't ground beneath us, then start falling
if (onground == 0)
{
    if (yspeed &lt; maxyspeed)
    {
        yspeed += 0.33 * gravity_mult
    }
};

//If there is ground beneath us, snap to the ground and stop falling
if (onground == 1)
{
    if (yspeed &gt;= 0)
    {
        move_contact_solid(270,abs(yspeed))
        yspeed = 0
    }
    if (yspeed &lt; 0)
    {
        yspeed = 0
        y += 8
    }
};


//If not moving left or right, slow to a stop
if not (keyboard_check(vk_left) or keyboard_check(vk_right))
{
    if (xspeed &lt; 0)
    {
        xspeed += 0.25 * friction_mult
    }
    if (xspeed &gt; 0)
    {
        xspeed -= 0.25 * friction_mult
    }
};

//Move left
if (keyboard_check(vk_left) and xspeed &gt; -maxxspeed)
{
    xspeed -= 0.25
};

//Move right
if (keyboard_check(vk_right) and xspeed &lt; maxxspeed)
{
    xspeed += 0.25
};

y += yspeed

if (xspeed &lt; 0 and place_free(bbox_left + 12,y-1))
{
    x += xspeed
}

if (xspeed &gt; 0 and place_free(bbox_right - 12,y-1))
{
    x += xspeed
}

//Determine direction (left or right)
if (xspeed != 0)
{
    spr_dir = sign(xspeed)
    image_xscale = spr_dir
}

//Sprite control
if (onground == 1)
{
    if (xspeed == 0)
    {
        sprite_index = spr_player_idle
        image_speed = 0.25
    }
    else
    {
        sprite_index = spr_player_run
        image_speed = 0.05 * abs(xspeed)
    }
}
else
{
    if (yspeed &lt; 0)
    {
        sprite_index = spr_player_jump
        if (image_index &lt; 1)
        {
            image_speed = 0.1
        }
        else
        {
            image_speed = 0
        }
    }
/*
    if (yspeed &gt; 0)
    {
        if (sprite_index != spr_player_fall)
        {
            sprite_index = spr_player_fall
            image_index = 0
        }
        if (image_index &lt; 1)
        {
            image_speed = 0.1
        }
        else
        {
            image_speed = 0
        }
    }
*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Jump of course!
if (onground == 1)
{
    y -= 1
    yspeed -= 8.5 * jump_mult
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
