<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>donut_width = sprite_get_width(spr_donut);
donut_height = sprite_get_height(spr_donut);
grid_width = 5; //How many donuts wide the grid should be
grid_height = 9; //How many donuts tall the grid should be
grid_xoffset = 40;
grid_yoffset = 0;
grid_main = ds_grid_create(grid_width,grid_height);

mx = 0;
my = 0;
validclick = false;

gx1 = -1;
gy1 = -1;
gx2 = -1;
gy2 = -1;

swapmode = 0;

swapspeed = 1.3;
swap = 0;
swap_dx1 = 0;
swap_dy1 = 0;
swap_dx2 = 0;
swap_dy2 = 0;
swap_dd1 = 0;
swap_dd2 = 0;

matchcount = 0;

//Make the initial donuts
for (i=0; i&lt;grid_width; i+=1)
{
    for (j=0; j&lt;grid_height; j+=1)
    {
        ds_grid_set(grid_main,i,j,irandom_range(1,sprite_get_number(spr_donut)));
    };
};

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(validclick==true)
{
    
    gx1 = togrid_x(mx);
    gy1 = togrid_y(my);
    
    if(swapmode==0)
    {
        var ddir;
        ddir = round(point_direction(mx,my,mouse_x,mouse_y)/90)*90;
        gx2 = gx1 + round(cos(degtorad(ddir)));
        gy2 = gy1 - round(sin(degtorad(ddir)));
        swapspeed = 1.5;
    }
    if(swapmode==1)
    {
        var ddir;
        ddir = round( (point_direction(mx,my,mouse_x,mouse_y)-45)/90)*90 +45;
        gx2 = gx1 + round(cos(degtorad(ddir)));
        gy2 = gy1 - round(sin(degtorad(ddir)));
        swapspeed = 1.4;
    }
    if(swapmode==2)
    {
        gx2 = togrid_x(mouse_x);
        gy2 = togrid_y(mouse_y);
        swapspeed = 1+(0.5/sqrt(point_distance(gx1,gy1,gx2,gy2)));
    }
    
    if(validcell(gx1,gy1) and validcell(gx2,gy2))
    {
        swap_dx1 = gx1*donut_width+grid_xoffset;
        swap_dy1 = gy1*donut_height+grid_yoffset;
        swap_dx2 = gx2*donut_width+grid_xoffset;
        swap_dy2 = gy2*donut_height+grid_yoffset;
        swap_dd1 = ds_grid_get(grid_main,gx1,gy1);
        swap_dd2 = ds_grid_get(grid_main,gx2,gy2);
        swap = 1;
    }
    else
    {
        swap = 0;
        gx1 = -1;
        gy1 = -1;
        gx2 = -1;
        gy2 = -1;
    }
    
    validclick = false;
    swapmode = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(swap==0 and instance_number(obj_fallingdonut)==0 and mouse_x&gt;grid_xoffset and mouse_y&gt;grid_yoffset and mouse_x&lt;grid_xoffset+grid_width*donut_width and mouse_y&lt;grid_yoffset+grid_height*donut_height)
{
    mx = mouse_x;
    my = mouse_y;
    validclick = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var lswap;
lswap = swap;
swap = swap/swapspeed;
if(swap&lt;0.002 and lswap&gt;=0.002)
{
    scr_switchcells(gx1,gy1,gx2,gy2)
    swap = 0;
    gx1 = -1;
    gy1 = -1;
    gx2 = -1;
    gy2 = -1;
}

var shoulddraw;
//Draw the donuts
for (i=0; i&lt;grid_width; i+=1)
{
    for (j=0; j&lt;grid_height; j+=1)
    {
        shoulddraw = true;
        if( (i==gx1 and j==gy1) or (i==gx2 and j==gy2) )
        {
            shoulddraw = false;
        }
        if(shoulddraw==true)
        {
            draw_sprite(spr_donut,abs(ds_grid_get(grid_main,i,j)),toworld_x(i),toworld_y(j));
        }
    };
};

if(swap&gt;0)
{
    draw_sprite(spr_donut,swap_dd2,lerp(swap_dx1,swap_dx2,swap),lerp(swap_dy1,swap_dy2,swap))
    draw_sprite(spr_donut,swap_dd1,lerp(swap_dx2,swap_dx1,swap),lerp(swap_dy2,swap_dy1,swap))
}

if(validclick==true)
{
    draw_sprite(spr_move,swapmode,floor((mx-grid_xoffset)/donut_width)*donut_width + grid_xoffset,floor((my-grid_yoffset)/donut_height)*donut_height + grid_yoffset)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="84">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>swapmode = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>swapmode = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
