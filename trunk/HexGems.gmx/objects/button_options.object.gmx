<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hex</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>buttons</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 1
image_speed = 0
lock = false
popup = 0
popup_smooth = 0
donebutton = noone
sfxslider = noone
musicslider = noone
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(lock==false)
{
    if(popup_smooth&lt;0.01)
    {
        audio_play_sound(snd_button,1,false)
        popup = 1
        buttons.lock = true
        buttons.depth = 0
        depth = -1
        
        with(menu_options)
        {
            instance_destroy()
        }
        
        donebutton = instance_create(room_width/2,room_height-256,button_options_done);
        
        sfxslider = instance_create(room_width/2,room_height/2-128,button_slider);
        sfxslider.val = vol_sfx
        sfxslider.sprite = spr_sfxicon
        sfxslider.image = 0
        sfxslider.x = sfxslider.x-sfxslider.width/2+sfxslider.width*sfxslider.val
        
        musicslider = instance_create(room_width/2,room_height/2+128,button_slider);
        musicslider.val = vol_music
        musicslider.sprite = spr_sfxicon
        musicslider.image = 1
        musicslider.x = musicslider.x-musicslider.width/2+musicslider.width*musicslider.val
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
var str,scl;

popup_smooth = (popup_smooth*4 + popup)/5

draw_self()

if(popup_smooth&gt;0.01)
{
    draw_set_color(c_white)
    draw_set_alpha(0+popup_smooth*0.75)
    draw_rectangle(0,0,room_width,room_height,false)
    draw_set_alpha(1)
    
    draw_set_color(blue2)
    draw_roundrect_ext(lerp(x-72,128-16,popup_smooth),lerp(y-72,128-16,popup_smooth),lerp(x+72,room_width-128+16,popup_smooth),lerp(y+72,room_height-128+16,popup_smooth),64,64,false)
    draw_set_color(blue)
    draw_roundrect_ext(lerp(x-72,128,popup_smooth),lerp(y-72,128,popup_smooth),lerp(x+72,room_width-128,popup_smooth),lerp(y+72,room_height-128,popup_smooth),64,64,false)
    draw_set_color(blue3)
    
    if(popup_smooth&lt;0.99)
    {
        menu_options.image_alpha = max(0,-2+popup_smooth*3)
    }
}
if(popup_smooth&lt;0.01 and popup_smooth&gt;0)
{
    with(menu_options)
    {
        instance_destroy()
    }
    buttons.lock = false
}
draw_set_color(c_black)
draw_set_alpha(0.5)
str = "OPTIONS"
scl = 256/string_width(str)
draw_text_transformed(lerp(x,room_width/2,popup_smooth),lerp(y,128+string_height(str)/2,popup_smooth),str,scl,scl,0)
draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>128,128</point>
    <point>128,128</point>
  </PhysicsShapePoints>
</object>
