<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center)
draw_set_valign(fa_middle)

xoff = 80
yoff = 80
hexw = 64
hexh = 56
width = 14
height = 12

colors[1] = merge_color(c_yellow,c_white,0.5)
colors[2] = merge_color(c_green,c_white,0.5)
colors[3] = merge_color(c_blue,c_white,0.5)
colors[4] = merge_color(c_red,c_white,0.5)
colors[5] = c_white

scr_creategrid()

click_mx = -1
click_my = -1

break_count = 0
break_x[0] = -1
break_y[0] = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mx,my,adj,hmod;

my = round(( mouse_y-xoff )/hexh)
mx = round(( mouse_x-xoff- (my mod 2)*(hexw/2) )/hexw)
hmod = !(my mod 2)

if(mx==click_mx and my==click_my and mx&gt;=0 and mx&lt;width and my&gt;=0 and my&lt;height)
{
    if(grid[mx,my]&gt;0)
    {
        while(active[mx,my]==1)
        {
            var adj,this;
            this = grid[mx,my]
            adj = 0
            
            if(scr_grid_is(mx-1,my,this)){adj+=1}
            if(scr_grid_is(mx+1,my,this)){adj+=1}
            if(scr_grid_is(mx,my-1,this)){adj+=1}
            if(scr_grid_is(mx,my+1,this)){adj+=1}
            if(scr_grid_is(mx+1-(hmod*2),my-1,this)){adj+=1}
            if(scr_grid_is(mx+1-(hmod*2),my+1,this)){adj+=1}
            
            if(adj&gt;1)
            {
                if(scr_grid_is(mx-1,my,this)){grid[mx-1,my]=0}
                if(scr_grid_is(mx+1,my,this)){grid[mx+1,my]=0}
                if(scr_grid_is(mx,my-1,this)){grid[mx,my-1]=0}
                if(scr_grid_is(mx,my+1,this)){grid[mx,my+1]=0}
                if(scr_grid_is(mx+1-(hmod*2),my-1,this)){grid[mx+1-(hmod*2),my-1]=0}
                if(scr_grid_is(mx+1-(hmod*2),my+1,this)){grid[mx+1-(hmod*2),my+1]=0}
                grid[mx,my] += 1
            }
            else
            {
                active[mx,my] = 0
            }
        }
    }
    
    if(grid[mx,my]==0)
    {
        grid[mx,my] = 1
        
        var adj,this;
        this = grid[mx,my]
        adj = 0
        
        if(scr_grid_is(mx-1,my,this)){adj+=1}
        if(scr_grid_is(mx+1,my,this)){adj+=1}
        if(scr_grid_is(mx,my-1,this)){adj+=1}
        if(scr_grid_is(mx,my+1,this)){adj+=1}
        if(scr_grid_is(mx+1-(hmod*2),my-1,this)){adj+=1}
        if(scr_grid_is(mx+1-(hmod*2),my+1,this)){adj+=1}
        
        if(adj&gt;1)
        {
            active[mx,my] = 1
        }
    }
}
else
if(break_count&gt;2)
{
    for(b=0;b&lt;break_count;b++)
    {
        grid[break_x[b],break_y[b]] = 0
        active[break_x[b],break_y[b]] = 0
    }
}
break_count = 0
click_mx = -1
click_my = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>click_my = round(( mouse_y-xoff )/hexh)
click_mx = round(( mouse_x-xoff- (click_my mod 2)*(hexw/2) )/hexw)
break_x[0] = click_mx
break_y[0] = click_my
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(click_mx&gt;=0)
{
    var mx,my,adj,hmod;
    
    my = round(( mouse_y-xoff )/hexh)
    mx = round(( mouse_x-xoff- (my mod 2)*(hexw/2) )/hexw)
    
    if(click_mx!=mx and click_my!=my)
    {
        if(scr_grid_is(mx,my,grid[click_mx,click_my]))
        {
            break_count += 1
            break_x[break_count] = mx
            break_y[break_count] = my
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var hmod,dx,dy,mx,my,col;

my = round(( mouse_y-xoff )/hexh)
mx = round(( mouse_x-xoff- (my mod 2)*(hexw/2) )/hexw)

for(j=0;j&lt;height;j++)
{
    for(i=0;i&lt;width;i++)
    {
        if(grid[i,j]&gt;=0)
        {
            hmod = (j mod 2)
            dx = xoff + (i + hmod/2)*hexw
            dy = yoff + j*hexh
            
            col = c_white
            if(i==mx and j==my){col = c_green}
            if(i==mx-1 and j==my){col = c_yellow}
            if(i==mx+1 and j==my){col = c_yellow}
            if(i==mx and j==my-1){col = c_yellow}
            if(i==mx and j==my+1){col = c_yellow}
            if(i==mx+1-(hmod*2) and j==my-1){col = c_yellow}
            if(i==mx+1-(hmod*2) and j==my+1){col = c_yellow}
            
            draw_sprite_ext(spr_hex,0,dx,dy,0.25,0.25,0,col,1)
            
            if(grid[i,j]&gt;0)
            {
                draw_sprite_ext(spr_gem,0,dx,dy,0.4,0.4,0,colors[grid[i,j]],1)
                if(active[i,j]==1)
                {
                    draw_sprite_ext(spr_halo,0,dx,dy,1,1,current_time/10 + (i+j*pi)*100,c_white,0.5+sin(current_time/100)*0.25)
                }
            }
        }
    }
}

if(break_count&gt;=1)
{
    for(b=1;b&lt;break_count;b++)
    {
        draw_line_width(break_x[b],break_y[b],break_x[b-1],break_y[b-1],4)
    }
}

draw_text(32,16,break_count)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_creategrid()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
