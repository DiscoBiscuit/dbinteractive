<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = 0
y = 0
color = choose(c_red,c_orange,c_yellow,c_green,c_blue,c_purple)
area = 100
dest_x = x
dest_y = y
view_move = 0
myspeed = 0
view_x = x
view_y = y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>myspeed = (myspeed*19 + mouse_check_button(mb_left))/20
view_move = (view_move*19 + mouse_check_button(mb_left))/20
move_towards_point(dest_x,dest_y,myspeed*10)
view_x = lerp(view_x,lerp(x,dest_x,view_move*0.5),0.1)
view_y = lerp(view_y,lerp(y,dest_y,view_move*0.5),0.1)
view_xview = view_x - view_wview/2 + room_width/2
view_yview = view_y - view_hview/2 + room_height/2

if(instance_number(obj_enemy)&gt;0)
{
    with(obj_enemy)
    {
        x -= obj_player.x
        y -= obj_player.y
    }
}
x = 0
y = 0

near = instance_nearest(x,y,obj_enemy)
r1 = sqrt(area)/pi
r2 = sqrt(near.area)/pi
if(point_distance(x,y,near.x,near.y)&lt;(r1+r2)*10)
{
    if(area&lt;near.area)
    {
        room_restart()
    }
    else
    {
        combo = false
        switch(color)
        {
            case c_red:
                switch(near.color)
                {
                    case c_red:
                        combo = true;
                        break;
                    case c_yellow:
                    case c_orange:
                        color = c_orange;
                        combo = true;
                        break;
                    case c_purple:
                    case c_blue:
                        color = c_purple;
                        combo = true;
                        break;
                    default:
                        combo = false;
                }
                break;
            case c_orange:
                switch(near.color)
                {
                    case c_orange:
                        combo = true;
                        break;
                    case c_yellow:
                        color = c_yellow;
                        combo = true;
                        break;
                    case c_red:
                        color = c_red;
                        combo = true;
                        break;
                    default:
                        combo = false;
                }
                break;
            case c_yellow:
                switch(near.color)
                {
                    case c_yellow:
                        combo = true;
                        break;
                    case c_red:
                    case c_orange:
                        color = c_orange;
                        combo = true;
                        break;
                    case c_green:
                    case c_blue:
                        color = c_green;
                        combo = true;
                        break;
                    default:
                        combo = false;
                }
                break;
            case c_green:
                switch(near.color)
                {
                    case c_green:
                        combo = true;
                        break;
                    case c_yellow:
                        color = c_yellow;
                        combo = true;
                        break;
                    case c_blue:
                        color = c_blue;
                        combo = true;
                        break;
                    default:
                        combo = false;
                }
                break;
            case c_blue:
                switch(near.color)
                {
                    case c_blue:
                        combo = true;
                        break;
                    case c_yellow:
                    case c_green:
                        color = c_green;
                        combo = true;
                        break;
                    case c_purple:
                    case c_red:
                        color = c_purple;
                        combo = true;
                        break;
                    default:
                        combo = false;
                }
                break;
            case c_purple:
                switch(near.color)
                {
                    case c_purple:
                        combo = true;
                        break;
                    case c_blue:
                        color = c_blue;
                        combo = true;
                        break;
                    case c_red:
                        color = c_red;
                        combo = true;
                        break;
                    default:
                        combo = false;
                }
                break;
        }
        if(combo = true)
        {
            area += near.area
            with(near){instance_destroy()}
        }
        else
        {
            room_restart()
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dest_x = mouse_x-room_width/2
dest_y = mouse_y-room_height/2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
radius = sqrt(area)/pi
draw_set_color(color)
draw_circle(room_width/2,room_width/2,radius*10/global.drawscale,false)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
