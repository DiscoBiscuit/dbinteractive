<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = network_socket_tcp;
port = 10142;
Socket = network_create_socket(type);
if not (instance_exists(obj_server))
{
    msg = get_string_async("Connect to...","127.0.0.1");
}
else
{
    ip = "127.0.0.1";
    isConnected = network_connect(Socket,ip,port);
}
var size,type,alignment;
size = 1024;
type = buffer_fixed;
alignment = 1;
buffer = buffer_create(size,type,alignment);
isConnected = 0
clientid = 0;
numplayers = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//send player x to the server
buffer_seek(buffer,buffer_seek_start,0);
buffer_write(buffer,buffer_u8,1);
buffer_write(buffer,buffer_u32,obj_player.x);
network_send_packet(Socket,buffer,buffer_tell(buffer));
//send player y to the server
buffer_seek(buffer,buffer_seek_start,0);
buffer_write(buffer,buffer_u8,2);
buffer_write(buffer,buffer_u32,obj_player.y);
network_send_packet(Socket,buffer,buffer_tell(buffer));
//send player sprite index to the server
buffer_seek(buffer,buffer_seek_start,0);
buffer_write(buffer,buffer_u8,4);
buffer_write(buffer,buffer_u32,obj_player.sprite_index);
network_send_packet(Socket,buffer,buffer_tell(buffer));
//send player image index to the server
buffer_seek(buffer,buffer_seek_start,0);
buffer_write(buffer,buffer_u8,5);
buffer_write(buffer,buffer_u32,obj_player.image_index);
network_send_packet(Socket,buffer,buffer_tell(buffer));
//send player image xscale to the server
buffer_seek(buffer,buffer_seek_start,0);
buffer_write(buffer,buffer_u8,6);
buffer_write(buffer,buffer_s32,obj_player.image_xscale);
network_send_packet(Socket,buffer,buffer_tell(buffer));
with (obj_player_dummy)
{
    if (clientid == obj_client.clientid)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var type_event = ds_map_find_value(async_load,"type");
switch (type_event)
{
    case network_type_data:
        var buffer = ds_map_find_value(async_load,"buffer");
        buffer_seek(buffer,buffer_seek_start,0);
        client_receivedpacket(buffer);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i_d = ds_map_find_value(async_load, "id");
if i_d == msg
{
if ds_map_find_value(async_load, "status")
   {
   if ds_map_find_value(async_load, "result") != ""
      {
      nnn = instance_create(0,0,obj_player_dummy);
      nnn.clientid = 0;
      ip = ds_map_find_value(async_load, "result");
      isConnected = network_connect(Socket,ip,port);
      }
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer,buffer_seek_start,0);
buffer_write(buffer,buffer_u8,3);
buffer_write(buffer,buffer_u16,clientid);
network_send_packet(Socket,buffer,buffer_tell(buffer));
network_destroy(Socket);
buffer_delete(buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_debug);
draw_set_color(c_black);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text(8,8,"Client Connected: "+string(isConnected));
draw_text(8,32,"Client ID: "+string(clientid));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
