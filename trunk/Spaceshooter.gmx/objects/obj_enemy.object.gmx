<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale = obj_control.gamescale
image_yscale = obj_control.gamescale
target = obj_player

myhealth = mymaxhealth
myhealthsmooth = myhealth
healthbaralpha = 0
redvalue = 255

turretang = 0

dir = point_direction(x,y,target.x,target.y)
dir_delta1 = 0
dir_delta2 = 0

canshoot = 0

buffed = 0
critz = 1
canbuff = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(x&gt;view_xview and y&gt;view_yview and x&lt;view_xview+view_wview and y&lt; view_yview+view_hview)
{
sound_volume(snd_boom1,global.sfxvolume-(distance_to_object(obj_player)/360))
sound_play(snd_boom1)
part_suicide_smoke();
part_spaceexplosion();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_outside_all(point_direction(x,y,other.x,other.y)+180,4)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>redvalue = (redvalue*4 + 255)/5
image_blend = make_color_rgb(255,redvalue,redvalue)
draw_self();
draw_sprite_ext(turretsprite,0,x,y,image_xscale,image_yscale,turretang,image_blend,image_alpha)


draw_set_alpha(0.6)
if(buffed == 1){
    var mybuff,buffdir;
    mybuff = instance_nearest(x,y,obj_buff)
    buffdir = point_direction(x,y,mybuff.x,mybuff.y)
    draw_set_blend_mode(bm_add)
    draw_line_width_color(x+lengthdir_x(31,buffdir),y+lengthdir_y(31,buffdir),mybuff.x,mybuff.y,5,c_red,c_red)
    draw_circle_color(x,y,32,c_black,c_red,false)
    draw_set_blend_mode(bm_normal)
    //part_buffbeam1();
}
else
if(critz &gt; 1){
    var mycritz,critzdir;
    mycritz = instance_nearest(x,y,obj_critz)
    critzdir = point_direction(x,y,mycritz.x,mycritz.y)
    draw_set_blend_mode(bm_add)
    draw_line_width_color(x+lengthdir_x(31,critzdir),y+lengthdir_y(31,critzdir),mycritz.x,mycritz.y,5,c_lime,c_lime)
    draw_circle_color(x,y,32,c_black,c_lime,false)
    draw_set_blend_mode(bm_normal)
    //part_buffbeam1();
}
draw_set_alpha(1)

if(healthbaralpha&gt;0)
{
    myhealthsmooth = max(myhealth,myhealthsmooth-1)   

    healthbaralpha = max(0,healthbaralpha-0.1)
    draw_set_alpha(min(1,healthbaralpha))
    draw_rectangle_color(x-32,y-55,x+32,y-48,c_dkgray,c_dkgray,c_dkgray,c_dkgray,0)
    
    if(myhealthsmooth&gt;myhealth)
    draw_rectangle_color(x-32,y-55,x-32+(myhealthsmooth/(mymaxhealth/64)),y-48,c_red,c_red,c_red,c_red,0) 
    
    draw_rectangle_color(x-32,y-55,x-32+(myhealth/(mymaxhealth/64)),y-48,c_lime,c_lime,c_lime,c_lime,0)  
    draw_rectangle_color(x-32,y-55,x+32,y-48,c_black,c_black,c_black,c_black,1)
    draw_set_alpha(1)
}


//Draw stupid ass gui thing
/* Actually it sucks uncomment this if you want to laugh your ass off
draw_set_alpha(0.75)
if(x&gt;view_xview and x&lt;view_xview+view_wview and y&gt;view_yview and y&lt;view_yview+view_hview){
    draw_circle_color(x,y,32,c_red,c_red,1)
    draw_line_color(x+lengthdir_x(32,point_direction(x,y,obj_player.x,obj_player.y)+45*sign(x-obj_player.x)),y+lengthdir_y(32,point_direction(x,y,obj_player.x,obj_player.y)+45*sign(x-obj_player.x)),x+lengthdir_x(distance_to_object(obj_player)/2,point_direction(x,y,obj_player.x,obj_player.y)+45*sign(x-obj_player.x)),y+lengthdir_y(distance_to_object(obj_player)/2,point_direction(x,y,obj_player.x,obj_player.y)+45*sign(x-obj_player.x)),c_red,c_red)
    draw_line_color(x+lengthdir_x(distance_to_object(obj_player)/2,point_direction(x,y,obj_player.x,obj_player.y)+45*sign(x-obj_player.x)),y+lengthdir_y(distance_to_object(obj_player)/2,point_direction(x,y,obj_player.x,obj_player.y)+45*sign(x-obj_player.x)),obj_player.x+64*sign(x-obj_player.x),obj_player.y,c_red,c_red)
}
draw_set_alpha(1)
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
