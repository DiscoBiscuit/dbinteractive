<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parUnit</parentName>
  <maskName>sprTempCharMask1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state_index = 5;
state_time = 0;
argument_clear = 0;
arg0 = 0;
arg1 = 0;
arg2 = 0;
arg3 = 0;
arg4 = 0;
arg5 = 0;
arg6 = 0;
arg7 = 0;
next_state = 0;

stand = sprTempCharStand;
run = sprTempCharRun;
on_air = sprTempCharJumps;
walk = sprTempCharWalk;
stride = sprTempCharStride;
crouch = sprTempCharCrouch;
crawl = sprTempCharCrawl;
sneak = sprTempCharSneak;
push = sprTempCharPush;

cut = sprTempCharAtkCut;
slash = sprTempCharAtkSlash;
bash = sprTempCharAtkBash;
smash = sprTempCharAtkSmash;
thrust = sprTempCharAtkThrust;
kick = sprTempCharAtkKick;
throw = sprTempCharAtkThrow;


//image_index = floor(random(image_number));
image_speed = 0.3;



//////////////////////
// Object Variables //
//////////////////////

//The default platforming stats for all platforming units.
//Modify these to your heart's content.

max_spd = 4;    //Max hspeed
acc_spd = 0.5;  //hspeed accelaration
jmp_spd =-10;    //Jumping speed(decreases by grv_spd every step)

grv_spd = 1.2;    //vspeed accelaration/gravity
grv_dir = 270;  //gravity direction(0=Right, 90=Up, 180=Left, 270=Down)
air_frc = 0.10; //Number to decrease hspeed by when no key is pressed in air
gnd_frc = 0.85; //Number to decrease hspeed by when no key is pressed on ground
max_slp = 2;    //Highest slope you can climb (in px)

//Required variables, don't mess with 'em

hsp     = 0;
vsp     = 0;
free    = 1;    //Whether you're in the air (1) or on the ground (0)
spr_dir = 1;    //Sprite direction (useful for image_xscale)
hold    = 0;    //Whether you're holding the jump key
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
//Handle Platforming Physics
air_frc = 0.15; //Number to decrease hspeed by when no key is pressed in air
gnd_frc = 3; //Number to decrease hspeed by when no key is pressed on ground
acc_spd = 3.5;  //Horizontal Acceleration
max_hsp = 3.5;    //Maximum Horizontal Acceleration
grv_spd = 2;    //Gravity
max_vsp = 13;   //Max Falling Speed
jmp_spd = 10;   //Jumping Speed (decreases by grv_spd every step)
jmp_top = 8;    //Number of times jmp_spd can be added to vsp until we fall
jmp_air = 1;    //Air jumps (1 for double jump)
zero_platforming(key_left,key_right,key_up,key_down)
*/

motion(keyboard_check(vk_right)==1,(keyboard_check(vk_numpad0)==1 &amp;&amp; keyboard_check(vk_down)==0),keyboard_check(vk_left)==1,0,1,(keyboard_check(vk_down)==1 &amp;&amp; keyboard_check(vk_numpad0)==1));
image_xscale = spr_dir;

//Handle Finite State Machines
state_machine(st_char_init); //set to first state
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state_index == st_char_stand){ //if we're standing,
    state_index = st_char_move }//we can move
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state_index == st_char_stand){ //if we're standing,
    state_index = st_char_move} //we can move
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_text(10,10,string(script_get_name(state_index)));
draw_text(10,30,string(state_time));
draw_text(10,50,string(state_next));
draw_text(10,70,string(state_nextnow));
draw_text(10,90,"hsp:"+string(hsp)+",vsp:"+string(vsp)+",sprdir:"+string(spr_dir));
draw_text(10,110,"imgind:"+string(image_index));
draw_text(10,130,"imgind:"+string(image_number));
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state_index == st_char_stand){ //if we're standing,
    state_index = st_char_test1 }//we can move
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
