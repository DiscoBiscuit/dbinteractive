<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//init vars
globalvar donut_width,donut_height,grid_width_cells,grid_height_cells,grid_width,grid_height,grid_x,grid_y,grid,pull,combo;
donut_width = sprite_get_width(spr_donut);
donut_height = sprite_get_height(spr_donut);
grid_width_cells = 5;
grid_height_cells = 9;
grid_width = grid_width_cells*donut_width;
grid_height = grid_height_cells*donut_height;
grid_x = 40;
grid_y = 0;
selsizemin = 0.9;
switchmode = 0; //0 is normal, 1 is diagonal, 2 is anywhere
background_hspeed[0] = 0.5;
selx = -1;
sely = -1;
startmatch = 0;
gamestart = 0;
addscore = 0;
score_perdonut = 5;
combo = 0;
//create grid
grid = ds_grid_create(grid_width_cells,grid_height_cells);
pull = ds_grid_create(grid_width_cells,grid_height_cells);
//shuffle board
randomize();
for (i=0;i&lt;grid_width_cells;i+=1)
{
    for (j=0;j&lt;grid_height_cells;j+=1)
    {
        ds_grid_set(grid,i,j,irandom_range(1,8));
        selsize[i,j] = 1;
        donutqueue[i] = 0;
    }
}
//match pieces at beginning (won't work up there??)
for (k=0;k&lt;grid_width_cells;k+=1)
{
    for (l=0;l&lt;grid_height_cells;l+=1)
    {
        scr_match(k,l);
    }
}
alarm[0] = 1;
alarm[1] = 1;

//audio volume is too loud!!
audio_sound_gain(snd_swipe,0.05,0);
audio_sound_gain(snd_match,0.5,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (startmatch == 0)
{
    gamestart = 1;
}
else
{
    startmatch = 0;
    for (k=0;k&lt;grid_width_cells;k+=1)
    {
        for (l=0;l&lt;grid_height_cells;l+=1)
        {
            scr_match(k,l);
        }
    }
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=0;i&lt;grid_width_cells;i+=1)
{
    if (donutqueue[i] &gt; 0)
    {
        var xx = grid_x+(i*donut_width);
        var yy = grid_y-donut_height;
        new = instance_create(xx,yy,obj_donut_fall);
        new.image_index = irandom_range(1,8);
        donutqueue[i] -= 1;
    }
}
alarm[0] = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (addscore &lt; score)
{
    addscore = round((addscore * 9 + score) / 10);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var switchdir,switchtemp,target;
if (switchmode == 0)
{
    switchdir = round(point_direction(mx,my,mouse_x,mouse_y)/90);
}
switch (switchdir)
{
    case 0:
        target[0] = selx + 1;
        target[1] = sely;
        break;
    case 1:
        target[0] = selx;
        target[1] = sely - 1;
        break;
    case 2:
        target[0] = selx - 1;
        target[1] = sely;
        break;
    case 3:
        target[0] = selx;
        target[1] = sely + 1;
        break;
    case 4:
        target[0] = selx + 1;
        target[1] = sely;
        break;
}
if (point_distance(mx,my,mouse_x,mouse_y) &gt; 64 and not (instance_exists(obj_donut_fall)) and not (instance_exists(obj_donut_switch))
and target[0] &gt;= 0 and target[0] &lt; grid_width_cells and target[1] &gt;= 0 and target[1] &lt; grid_height_cells)
{
    target[0] = clamp(target[0],0,grid_width_cells-1);
    target[1] = clamp(target[1],0,grid_height_cells-1);
    switchtemp = ds_grid_get(grid,target[0],target[1]);
    var xx = grid_x+(target[0]*donut_width);
    var yy = grid_y+(target[1]*donut_height);
    var xx2 = grid_x+(selx*donut_width);
    var yy2 = grid_y+(sely*donut_height);
    new2 = instance_create(xx2,yy2,obj_donut_switch);
    new2.image_index = ds_grid_get(grid,selx,sely);
    new2.goalx = xx;
    new2.goaly = yy;
    ds_grid_set(grid,selx,sely,0);
    new = instance_create(xx,yy,obj_donut_switch);
    new.image_index = ds_grid_get(grid,target[0],target[1]);
    new.goalx = xx2;
    new.goaly = yy2;
    ds_grid_set(grid,target[0],target[1],0);
    audio_sound_pitch(snd_swipe,random_range(0.8,1.2));
    audio_play_sound(snd_swipe,0,false);
    combo = 0;
}
selx = -1;
sely = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//select donut
if (scr_getgridcellx(mouse_x) &gt;= 0 and scr_getgridcellx(mouse_x) &lt; grid_width_cells
and scr_getgridcelly(mouse_y) &gt;= 0 and scr_getgridcelly(mouse_y) &lt; grid_height_cells)
{
    if (ds_grid_get(grid,scr_getgridcellx(mouse_x),scr_getgridcelly(mouse_y)) != 0)
    {
        mx = mouse_x;
        my = mouse_y;
        selx = scr_getgridcellx(mouse_x);
        sely = scr_getgridcelly(mouse_y);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw the loading screen to mask the match checking at the beginning
var paleblue = make_color_rgb(150,200,255);
var paleblue2 = make_color_rgb(125,175,220);
if (gamestart == 0)
{
    draw_set_color(paleblue);
    draw_rectangle(0,0,view_wport,view_hport,false);
    draw_set_color(paleblue2);
    draw_rectangle(0,0,view_wport,view_hport,true);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_set_font(fnt_main);
    draw_text(view_wport/2,view_hport/2,"Loading...");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//board background
var paleblue = make_color_rgb(150,200,255);
var paleblue2 = make_color_rgb(125,175,220);
draw_set_alpha(1);
draw_set_color(paleblue);
draw_rectangle(grid_x,grid_y,grid_x+grid_width,grid_y+grid_height,false);
draw_set_color(paleblue2);
draw_rectangle(grid_x,grid_y,grid_x+grid_width,grid_y+grid_height,true);
//draw the donuts
for (i=0;i&lt;grid_width_cells;i+=1)
{
    for (j=0;j&lt;grid_height_cells;j+=1)
    {
        if (selx == i and sely == j)
        {
            if (selsize[i,j] &gt; selsizemin)
            {
                selsize[i,j] -= 0.02;
            }
        }
        else
        {
            if (selsize[i,j] &lt; 1)
            {
                selsize[i,j] += 0.02;
            }
        }
        sprite_set_offset(spr_donut,donut_width/2,donut_height/2);
        draw_sprite_ext(spr_donut,ds_grid_get(grid,i,j),grid_x+i*donut_width+(donut_width/2),grid_y+j*donut_height+(donut_height/2),selsize[i,j],selsize[i,j],image_angle,image_blend,image_alpha);
        sprite_set_offset(spr_donut,0,0);
    }
}
//draw the score
var paleorange = make_color_rgb(255,150,50);
var paleorange2 = make_color_rgb(205,100,0);
draw_set_font(fnt_score);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
scr_text_outline(addscore,room_width/2,room_height-64,paleorange,paleorange2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
