<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*set variables, don't change this part */
selected=0;
rot=0;
item=0;

/*set the position of the menu, change to whatever you want */
menu_x=room_width/2;
menu_y=room_height/2;

/*set the size of the menu, again change to whatever you want */
menu_width=500;
menu_height=50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*change the selection based on the left and right arrow keys */
selected+=keyboard_check_pressed(vk_left)-keyboard_check_pressed(vk_right);

/*rotate towards the selection */
rot-=angle_difference(rot,selected*(360/image_number))/(0.2*room_speed);

/*sets the variable item to the image_index of the current selected item */
item=-selected mod image_number;
if (item)&lt;0 item+=image_number;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*set variables */
var pr, i;
i=0;

/*create a priority queue */
pr=ds_priority_create();

/*add the menu items to it */
repeat (image_number) {
ds_priority_add(pr,i,lengthdir_y(1,(rot-90)+i*(360/image_number)));
i+=1;}

/*draw the menu */
repeat (image_number) {
i=ds_priority_delete_min(pr);
draw_sprite_ext(sprite_index,i,menu_x+lengthdir_x(menu_width/2,(rot-90)+i*(360/image_number)),menu_y+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number)),1+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number))/(menu_height*2),1+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number))/(menu_height*2),0,c_white,1);
}

/*remove the priority queue */
ds_priority_destroy(pr);

/*draws text based on what item you have selected. */
var text;
switch (item) {
    case 0: text="Play" break;
    case 1: text="Help" break;
    case 2: text="Quit" break;
    case 3: text="Omg" break;
    case 4: text="ZOMBIES!!!" break;
    case 5: text="Ultra secret cheat button!!#Press it to complete the game!" break;
    case 6: text="More zombies.." break;
    case 7: text="Even more zombies..." break;
    case 8: text="Lots of zombies!" break;
    case 9: text="Zillions of zombies!!" break;
    default: text=""
    }

draw_set_halign(fa_center);
draw_text(320,320,text);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*do something based on what the user selected. in this example only help and quit does something.(and the "secret" cheat button) */
switch (item) {
    case 1: break;
    case 2: game_end() break;
    case 5: show_message("ZOMG U PRESSED DA SUPER SECRET CHEAT BUTTON U WON DA GAME OMG OMG OMG") break;
    }
/*the value of the variable item is always equal to the image_index of the currently selected option. */
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>17,17</point>
    <point>17,17</point>
  </PhysicsShapePoints>
</object>
