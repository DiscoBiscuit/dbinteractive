<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_control</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize()
sprite_index=noone
//Define the variables that will be the top left corner of the selection box
selectx = 0
selecty = 0
//Create an empty list, this is all the units that are selected
selection = ds_list_create()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Mouse based camera movement
//Right
if(view_xview&lt;room_width){
    if(mouse_x&gt;view_xview+(view_wport-20)){
        view_xview+=8
    }
}
//Left
if(view_xview&gt;0){
    if(mouse_x&lt;view_xview+(20)){
        view_xview-=8
    }
}
//Down
if(view_yview&lt;room_height){
    if(mouse_y&gt;view_yview+(view_hport-20)){
        view_yview+=8
    }
}
//Up
if(view_yview&gt;0){
    if(mouse_y&lt;view_yview+(20)){
        view_yview-=8
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//WE HAVE JUST FINISHED DRAGGING A SELECTION BOX

//Clear the selection list so we can start anew
ds_list_clear(selection)

//Deselect all units first
with obj_unit
{
if team == 0
{
selected = false
selectnum = -1
//then if they are within the selection box... (edited to include backwards dragging)
if (x&gt;obj_control.selectx and y&gt;obj_control.selecty and x&lt;mouse_x and y&lt;mouse_y) or (x&lt;obj_control.selectx and y&lt;obj_control.selecty and x&gt;mouse_x and y&gt;mouse_y)
{
//Set their selection to true and add them to the control's list of selected units
selected = true
ds_list_add(obj_control.selection,self)
selectnum = ds_list_size(obj_control.selection)
}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//WE HAVE JUST ISSUED AN ORDER WITH MOUSE2

//we need to create a new formation
nnn = instance_create(0,0,obj_formation)

//these will be used to find the middle of all units selected, the average position
avgx = 0
avgy = 0
//this is used as a counter to tell the formation how many units are in it*
formnum = 0

with obj_unit
{
if team == 0
{
//All instances of obj_unit will test if they are selected
if selected
{
//If they are already in a formation...
if instance_exists(formation)
{
//Set that formation's count 1 down, and remove this unit from its list of participants
formation.count -= 1
ds_list_delete(formation.selection,ds_list_find_index(formation.selection,self))
//if that formation now has noone in it, its uselsss, so we delete it on the spot
if formation.count &lt;= 0
with formation
instance_destroy()
}
//Tell the unit itself what number it is in the formation, so it can move propperly
formnum = obj_control.formnum
//Add one to the counter*
obj_control.formnum += 1
//Tell this unit what formation to follow, nnn, which we defined near the top
formation = obj_control.nnn
//Add his position to the averager, so we can divide and get the position later**
obj_control.avgx += x
obj_control.avgy += y
}
}
}

//Reference number, how many units were selected when the order was given
count = ds_list_size(selection)

//if the count is 0, no units were selected when you right clicked...
if count=0
{
//So we go ahead and destroy nnn, which is the new formation object
with nnn
instance_destroy()
}
else
{
//But if it has units, then the formation object gets a list and we copy the control's list of selected units into there for later
nnn.selection = ds_list_create()
ds_list_copy(nnn.selection,selection)

//Tell the formation how many units it has and how wide it should keep the units
nnn.count = ds_list_size(obj_control.selection)
//By using square root, the formation will always be as close to a square as possible. You could also input a constant and all formations would be x units wide
nnn.width = floor(sqrt(nnn.count))

//Here we divide the accumulated positions by how many there are to get the average...
avgx = avgx/count
avgy = avgy/count
//And then we move the formation object to their center
nnn.x = avgx
nnn.y = avgy
//Lastly, we tell the formation where its headed
nnn.destx = mouse_x
nnn.desty = mouse_y
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//WE HAVE JUST STARTED A NEW SELECTION WINDOW

selectx = mouse_x
selecty = mouse_y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If the selection box is being dragged, draw that bitch up!
if mouse_check_button(mb_left)
{
draw_set_color(c_green)
draw_rectangle(selectx,selecty,mouse_x,mouse_y,true)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
