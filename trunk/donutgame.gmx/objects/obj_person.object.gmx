<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_body</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_snap(120,120);
alarm[0] = 1;
mp_grid_add_cell(global.movegrid,floor(x/1920*16),floor(y/1080*9));
//stuff for drawing in isometric
isoX = ((x-y));
isoY = ((x+y)/2);
isoZ = 0;
isoDir = 0; //0 is down right, 1 is down left, 2 is up left, 3 is up right
spritescale = 0.5;
image_speed = 0;
dir = 0;
footdir = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//move around sometimes
var chance;
chance = choose(0,0,0,1);
if (chance == 1 and global.moving == false)
{
    var goalx,goaly;
    goalx = random_range(0,room_width);
    goaly = random_range(0,room_height);
    goalx = (floor(goalx/120)*120);
    goaly = (floor(goaly/120)*120);
    scr_moveto(goalx,goaly,4);
}
alarm[0] = random_range(60,600);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//keep isometric positions updated
var p = path_index;
if (p != -1)
{
    var sine,cosine;
    sine = sin(current_time/32)*(path_speed/2);
    cosine = cos(current_time/32)*(path_speed/2);
    isoX = x-y;
    isoY = ((x+sine)+(y+cosine))/2;
}
else
{
    isoX = x-y;
    isoY = (x+y)/2;
}
if (image_xscale == 1)
{
    if (p != -1)
    {
        var sine,cosine;
        sine = sin(current_time/48)*(path_speed*2)*footdir;
        cosine = cos(current_time/48)*(path_speed*2);
        cosine = clamp(cosine,-path_speed*2,0);
    }
    else
    {
        sine = 0;
        cosine = 0
    }
    isoFootX1 = ((x+8)+sine)-((y+24+cosine/2));
    isoFootY1 = (((x+8)+sine)+((y+24))+cosine/2)/2;
    isoFootX2 = ((x+8)-sine)-((y-12)-cosine/2);
    isoFootY2 = (((x+8)-sine)+((y-12))-cosine/2)/2;
}
else
{
    if (p != -1)
    {
        var sine,cosine;
        sine = sin(current_time/48)*(path_speed*2)*footdir;
        cosine = cos(current_time/48)*(path_speed*2);
        cosine = clamp(cosine,-path_speed*2,0);
    }
    else
    {
        sine = 0;
        cosine = 0
    }
    isoFootX1 = ((x+24)+cosine/2)-((y+8)+sine);
    isoFootY1 = (((x+24)+cosine/2)+((y+8))+sine)/2;
    isoFootX2 = ((x-12)-cosine/2)-((y+8)-sine);
    isoFootY2 = (((x-12)-cosine/2)+((y+8))-sine)/2;
}
depth = -y;
depth+= -x;

//rotate sprite or whatev
if (p != -1)
{
    dir=direction;
    if (dir&gt;315 or dir&lt;=45)
    {
        image_xscale = 1;
        image_index = 0;
        footdir = -1;
        //front right (right)
    }
    if (dir&gt;225 and dir &lt;=315)
    {
        image_xscale = -1;
        image_index = 0;
        footdir = -1;
        //front left (down)
    }
    if (dir&gt;135 and dir &lt;=225)
    {
        image_xscale = 1;
        image_index = 1;
        footdir = 1;
        //back left (left)
    }
    if (dir &gt;45 and dir&lt;=135)
    {
        image_xscale = -1;
        image_index = 1;
        footdir = 1;
        //back right (up)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path_delete(pt_newpath);
global.moving = false;
mp_grid_add_cell(global.movegrid,floor(x/1920*16),floor(y/1080*9));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.drawmode == -1)
{
    //draw feet
    if (image_xscale == 1)
    {
        draw_sprite(spr_hand,image_index,isoFootX2+room_width/2.5,(isoFootY2-isoZ)+32);
        draw_sprite(spr_hand,image_index,isoFootX1+room_width/2.5,(isoFootY1-isoZ)+32);
    }
    else
    {
        draw_sprite(spr_hand,image_index,isoFootX2+room_width/2.5,(isoFootY2-isoZ)+32);
        draw_sprite(spr_hand,image_index,isoFootX1+room_width/2.5,(isoFootY1-isoZ)+32);
    }
    //draw body
    draw_sprite_ext(spr_body,image_index,isoX+room_width/2.5,(isoY-isoZ)-12,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
    //draw the ol noggin
    draw_sprite_ext(spr_head,image_index,isoX+room_width/2.5,(isoY-isoZ)-80,image_xscale/1.5,image_yscale/1.5,image_angle,image_blend,image_alpha);
}
else
{
    draw_sprite(spr_person,image_index,x,y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>60,60</point>
  </PhysicsShapePoints>
</object>
