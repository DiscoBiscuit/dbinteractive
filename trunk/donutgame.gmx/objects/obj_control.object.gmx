<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
//create the grid
global.drawmode = 1;
global.movegrid = mp_grid_create(0,0,16,9,120,120);
//only 1 person can move at a time to prevent weirdness
global.moving = false;
//walls are off limits
mp_grid_add_instances(global.movegrid,obj_world,1);
//get view stuff
wv = view_wview[0];
hv = view_hview[0];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (view_wview[0] &lt; room_width * 2)
{
    view_wview[0] = view_wview[0] / 0.75;
    view_hview[0] = view_hview[0] / 0.75;
    view_xview[0] -= view_wview / 8;
    view_yview[0] -= view_hview / 8;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (view_wview[0] &gt; room_width / 2)
{
    view_xview[0] += view_wview / 8;
    view_yview[0] += view_hview / 8;
    view_wview[0] = view_wview[0] * 0.75;
    view_hview[0] = view_hview[0] * 0.75;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black);
draw_text(0,0,"MX "+string(mouse_x));
draw_text(0,16,"MY "+string(mouse_y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//debug stuff
draw_set_alpha(0.25);
if keyboard_check(ord('G'))
{
    mp_grid_draw(global.movegrid);
}
draw_set_alpha(1);
var rw,rh;
rw = room_width;
rh = room_height;
if (global.drawmode == -1)
{
    draw_line(scr_iso_x(0,0),scr_iso_y(0,0),scr_iso_x(rw,0),scr_iso_y(rw,0));
    draw_line(scr_iso_x(rw,0),scr_iso_y(rw,0),scr_iso_x(rw,rh),scr_iso_y(rw,rh));
    draw_line(scr_iso_x(rw,rh),scr_iso_y(rw,rh),scr_iso_x(0,rh),scr_iso_y(0,rh));
    draw_line(scr_iso_x(0,rh),scr_iso_y(0,rh),scr_iso_x(0,0),scr_iso_y(0,0));
}

//primitive testing
if (global.drawmode == -1)
{
    draw_set_color(c_white);
    var t = background_get_texture(bg_floor);
    texture_set_repeat(true);
    //draw floor
    draw_primitive_begin_texture(pr_trianglestrip,t);
    draw_vertex_texture(scr_iso_x(0,0),scr_iso_y(0,0),0,0);
    draw_vertex_texture(scr_iso_x(0,rh),scr_iso_y(0,rh),0,9);
    draw_vertex_texture(scr_iso_x(rw,0),scr_iso_y(rw,0),16,0);
    draw_vertex_texture(scr_iso_x(rw,rh),scr_iso_y(rw,rh),16,9);
    draw_primitive_end();
    //draw back left wall
    t = background_get_texture(bg_wall);
    draw_primitive_begin_texture(pr_trianglestrip,t);
    draw_vertex_texture_color(scr_iso_x(0,rh),scr_iso_y(0,rh),0,0,c_gray,1);
    draw_vertex_texture_color(scr_iso_x(0,rh),scr_iso_y(0,rh)-256,0,2,c_white,1);
    draw_vertex_texture_color(scr_iso_x(0,0),scr_iso_y(0,0),9,0,c_gray,1);
    draw_vertex_texture_color(scr_iso_x(0,0),scr_iso_y(0,0)-256,9,2,c_white,1);
    draw_primitive_end();
    //draw back right wall
    draw_primitive_begin_texture(pr_trianglestrip,t);
    draw_vertex_texture_color(scr_iso_x(0,0),scr_iso_y(0,0),0,0,c_gray,1);
    draw_vertex_texture_color(scr_iso_x(0,0),scr_iso_y(0,0)-256,0,2,c_white,1);
    draw_vertex_texture_color(scr_iso_x(rw,0),scr_iso_y(rw,0),16,0,c_gray,1);
    draw_vertex_texture_color(scr_iso_x(rw,0),scr_iso_y(rw,0)-256,16,2,c_white,1);
    draw_primitive_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="86">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//switch between topdown and iso views for testing (not in final game)
global.drawmode = -global.drawmode;
if global.drawmode = 1
{
    view_wview[0] = wv;
    view_hview[0] = hv;
    background_x = 0;
    view_xview = 0;
    view_yview = 0;
}
else
{
    view_wview[0] = wv / 0.75;
    view_hview[0] = hv / 0.75;
    view_xview = 0;
    view_yview = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
