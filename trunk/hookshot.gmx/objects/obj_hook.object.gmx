<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hook</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hookhost = noone;
phy_fixed_rotation = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hookhost == noone
{
    phy_rotation = -point_direction(phy_position_x,phy_position_y,phy_position_x+phy_speed_x,phy_position_y+phy_speed_y);
}
if (point_distance(phy_position_x,phy_position_y,obj_player.phy_position_x,obj_player.phy_position_y) &gt; 720)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision_block">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hookhost = other;
physics_joint_weld_create(self,hookhost,x,y,0,10,1,false);

with obj_player
{
    next_rope = instance_create(x,y+offset_y,obj_rope);

    attach = physics_joint_distance_create(rope_host,next_rope,rope_host.x,rope_host.y,next_rope.x,next_rope.y,false);
    //attach = physics_joint_rope_create(rope_host,next_rope,rope_host.x,rope_host.y,next_rope.x,next_rope.y,8,false);
    physics_joint_set_value(attach,phy_joint_damping_ratio,1);
    physics_joint_set_value(attach,phy_joint_frequency,10);
    with (next_rope)
    {
        parent = other.id;
    }
    
    
    repeat point_distance(x,y,obj_hook.x,obj_hook.y)/40
    {
        offset_y += 1;
        last_rope = next_rope;
        next_rope = instance_create(x + lengthdir_x(point_distance(x,y,obj_hook.x,obj_hook.y)/20,point_direction(x,y,obj_hook.x,obj_hook.y)),y + lengthdir_y((point_distance(x,y,obj_hook.x,obj_hook.y)/20)*offset_y,point_direction(x,y,obj_hook.x,obj_hook.y)),obj_rope);
        
        //link = physics_joint_distance_create(last_rope,next_rope,last_rope.x,last_rope.y,next_rope.x,next_rope.y,false);
        link = physics_joint_rope_create(last_rope,next_rope,last_rope.x,last_rope.y,next_rope.x,next_rope.y,32,false);
        physics_joint_set_value(link,phy_joint_damping_ratio,1);
        physics_joint_set_value(link,phy_joint_frequency,10);
        with next_rope
        {
            parent = other.last_rope;
        }
    }
    next_rope.phy_position_x = obj_hook.x;
    next_rope.phy_position_y = obj_hook.y;
    attach2 = physics_joint_weld_create(obj_hook,next_rope,obj_hook.x,obj_hook.y,obj_hook.phy_rotation,0,0,false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if hookhost == noone and instance_exists(obj_hook)
{
    draw_set_color(make_color_rgb(125,85,0));
    draw_line_width(x,y,obj_player.x,obj_player.y,3);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.00100000004749745</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,4</point>
    <point>8,4</point>
    <point>8,28</point>
    <point>0,28</point>
  </PhysicsShapePoints>
</object>
