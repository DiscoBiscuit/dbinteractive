<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xspeedmax = 6;
phy_fixed_rotation = true;
onground = false;
hookshot = false;

offset_y = 0;
rope_host = self;
/*
next_rope = instance_create(x,y+offset_y,obj_rope);

attach = physics_joint_distance_create(rope_host,next_rope,rope_host.x,rope_host.y,next_rope.x,next_rope.y,false);
physics_joint_set_value(attach,phy_joint_damping_ratio,1);
physics_joint_set_value(attach,phy_joint_frequency,10);
with (next_rope)
{
    parent = other.id;
}


repeat 10
{
    offset_y += 1;
    last_rope = next_rope;
    next_rope = instance_create(x,y+offset_y,obj_rope);
    
    link = physics_joint_distance_create(last_rope,next_rope,last_rope.x,last_rope.y,next_rope.x,next_rope.y,false);
    physics_joint_set_value(link,phy_joint_damping_ratio,1);
    physics_joint_set_value(link,phy_joint_frequency,10);
    with next_rope
    {
        parent = other.last_rope;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var moveleft,moveright,jump;
moveleft = ord('A');
moveright = ord('D');
jump = vk_space;
onground = collision_rectangle(x-25,bbox_bottom,x+19,bbox_bottom,obj_collision_block,false,true);
if keyboard_check(moveleft) or keyboard_check(moveright)
{
    if onground
    {
        physics_apply_force(x,y,700 * (keyboard_check(moveright) - keyboard_check(moveleft)),0);
    }
    else
    {
        if not place_meeting(x,y,obj_collision_block)
        {
            physics_apply_force(x,y,250 * (keyboard_check(moveright) - keyboard_check(moveleft)),0);
        }
    }
}
phy_speed_x = clamp(phy_speed_x,-xspeedmax,xspeedmax);
if onground
{
    if (phy_speed_x == 0)
    {
        sprite_index = spr_player_stand;
    }
    else
    {
        sprite_index = spr_player_walk;
        image_speed = phy_speed_x / 10;
    }
}
else
{
    sprite_index = spr_player_jump;
}
if keyboard_check_pressed(jump) and onground
{
    physics_apply_impulse(x,y,0,-250);
}
if keyboard_check_pressed(moveleft)
{
    image_xscale = -1;
}
if keyboard_check_pressed(moveright)
{
    image_xscale = 1;
}
if hookshot and instance_exists(obj_hook) and not onground
{
    if (obj_hook.hookhost != noone)
    {
        phy_fixed_rotation = false;
    }
}
if onground or not hookshot
{
    phy_fixed_rotation = true;
}

if phy_fixed_rotation == true and phy_rotation != 0
{
    phy_rotation = scr_rotate(phy_rotation,0,8);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision_block">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>do this</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with obj_rope
{
    instance_destroy();
}
with obj_hook
{
    instance_destroy();
}
hookshot = false;
offset_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not hookshot
{
    with instance_create(x,y,obj_hook)
    {
        var mousedir = point_direction(x,y,mouse_x,mouse_y);
        phy_speed_x = lengthdir_x(2000,mousedir);
        phy_speed_y = lengthdir_y(2000,mousedir);
    }
    hookshot = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_position_x = xstart;
phy_position_y = ystart;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
var basex,basey;
basex = lengthdir_x(48,point_direction(x,y,mouse_x,mouse_y));
basey = lengthdir_y(48,point_direction(x,y,mouse_x,mouse_y));
basex2 = lengthdir_x(96,point_direction(x,y,mouse_x,mouse_y));
basey2 = lengthdir_y(96,point_direction(x,y,mouse_x,mouse_y));
draw_set_color(c_gray);
draw_line_width(x + basex,y + basey,x + basex2,y + basey2,1);
if hookshot and instance_exists(obj_hook)
{
    if (obj_hook.hookhost != noone)
    {
        draw_set_color(make_color_rgb(125,85,0));
        draw_line_width(next_rope.x,next_rope.y,obj_hook.x,obj_hook.y,3);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.100000001490116</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.25</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,0</point>
    <point>52,0</point>
    <point>52,90</point>
    <point>8,90</point>
  </PhysicsShapePoints>
</object>
