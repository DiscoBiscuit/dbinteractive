<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar ropearray;
ropearray = ds_list_create();
scr_setcontrols();
phy_fixed_rotation = true;
xspeedmax = 6;
jumppower = 6;
onground = false;
hooked = false;
alarm[0] = 30;
roperetractnum = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//retract hookshot
if keyboard_check(ord('W')) and hooked and instance_number(obj_rope) &gt;= 3
{

    with ds_list_find_value(ropearray,roperetractnum)
    {
        instance_destroy();
    }
    with ds_list_find_value(ropearray,roperetractnum+1)
    {
        phy_position_x = obj_hook.x;
        phy_position_y = obj_hook.y;
        attach = physics_joint_distance_create(self,obj_hook,obj_hook.x,obj_hook.y,obj_hook.x,obj_hook.y,false)
    }
    roperetractnum += 1;
}
//extend hookshot
if keyboard_check(ord('S')) and hooked and instance_number(obj_rope) &lt;= 10
{
    with obj_hook
    {
        physics_joint_delete(attachtoplayer);
        last_rope = next_rope
        next_rope = instance_create(obj_player.x,obj_player.y,obj_rope);
        ds_list_add(ropearray,next_rope.id);
        var dir2 = point_direction(last_rope.x,last_rope.y,next_rope.x,next_rope.y);
        next_rope.phy_rotation = -dir2+90;
        next_rope.parent = last_rope
        link = physics_joint_distance_create(last_rope,next_rope,last_rope.x,last_rope.y,next_rope.x,next_rope.y,false);
        attachtoplayer = physics_joint_distance_create(obj_player,next_rope,obj_player.x,obj_player.y-32,next_rope.x,next_rope.y,false);
    }
}
alarm[0] = 30;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player movement
//check if on ground
onground = place_meeting(x,y,obj_collision_mask);
//move left or right
var movingleft,movingright;
movingleft = keyboard_check(moveleft);
movingright = keyboard_check(moveright);
if movingleft or movingright
{
    if onground
    {
        physics_apply_force(x,y,(movingright-movingleft) * 10,0);
        phy_fixed_rotation = true;
    }
    else
    {
        if hooked
        {
            xspeedmax = 8;
            phy_fixed_rotation = false;
            var dir,dist,fx,fy;
            dir = point_direction(x,y,obj_hook.x,obj_hook.y);
            dist = (keyboard_check(moveright) - keyboard_check(moveleft)) * (2+(phy_speed)/1.5);
            fx = lengthdir_x(dist,dir-90+60*sign(dist));
            fy = lengthdir_y(dist,dir-90+60*sign(dist));
            physics_apply_force(x,y,fx,fy);
        }
        else
        {
            physics_apply_force(x,y,(movingright-movingleft) * 5,0);
            xspeedmax = 6;
            phy_fixed_rotation = true;
        }
    }
}
phy_speed_x = clamp(phy_speed_x,-xspeedmax,xspeedmax);
//jump
if keyboard_check_pressed(jump) and onground
{
    physics_apply_impulse(x,y,0,-jumppower);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animation
if keyboard_check_pressed(moveleft)
{
    image_xscale = -1;
}
if keyboard_check_pressed(moveright)
{
    image_xscale = 1;
}
if not onground
{
    sprite_index = spr_player_jump;
}
else
{
    if phy_speed_x != 0
    {
        sprite_index = spr_player_walk;
        image_speed = phy_speed_x / 12;
    }
    else
    {
        sprite_index = spr_player_stand;
    }
}
if phy_fixed_rotation = true and phy_rotation != 0
{
    phy_rotation = scr_rotate(phy_rotation,0,8);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision_mask">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>do this</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_hook)
{
    with obj_rope
    {
        instance_destroy();
    }
    with obj_hook
    {
        instance_destroy();
    }
    hooked = false;
    ds_list_clear(ropearray);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not instance_exists(obj_hook)
{
    var dir = point_direction(x,y,mouse_x,mouse_y);
    instance_create(x+lengthdir_x(48,dir),y+lengthdir_y(48,dir),obj_hook);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_position_x = xstart;
phy_position_y = ystart;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>66,0</point>
    <point>66,88</point>
    <point>0,88</point>
  </PhysicsShapePoints>
</object>
