<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_knight_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Movement
xspeed = 0;
yspeed = 0;
xspeedmax = 5;
yspeedmax = 5;
fric = 8
accel = 1;
myspeed = 0;
mydir = 0;

//Sprite
walkframe = 0;
alarm[0] = 6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Movement
var moveUp,moveDown,moveLeft,moveRight;
moveUp = keyboard_check(ord('W'));
moveDown = keyboard_check(ord('S'));
moveLeft = keyboard_check(ord('A'));
moveRight = keyboard_check(ord('D'));
moveUpLeft = moveUp and moveLeft;
moveUpRight = moveUp and moveRight;
moveDownLeft = moveDown and moveLeft;
moveDownRight = moveDown and moveRight;
myspeed = point_distance(0,0,xspeed,yspeed);
if (moveUpLeft)
{
    xspeed -= accel;
    yspeed -= accel;
}
else if (moveUpRight)
{
    xspeed += accel;
    yspeed -= accel;
}
else if (moveDownLeft)
{
    xspeed -= accel;
    yspeed += accel;
}
else if (moveDownRight)
{
    xspeed += accel;
    yspeed += accel;
}
else if (moveUp)
{
    yspeed -= accel;
}
else if (moveDown)
{
    yspeed += accel;
}
else if (moveLeft)
{
    xspeed -= accel;
}
else if (moveRight)
{
    xspeed += accel;
}
else
{
    if (myspeed &lt; 1)
    {
        xspeed = 0;
        yspeed = 0;
    }
}
if not (moveUpLeft or moveUpRight or moveDownLeft or moveDownRight)
{
    xspeed = (xspeed*(fric-1))/fric;
    yspeed = (yspeed*(fric-1))/fric;
}
else
{
    xspeed = (xspeed*((fric-3)-1))/(fric-3);
    yspeed = (yspeed*((fric-3)-1))/(fric-3);
}
var originx,originy;
originx = x+sprite_width/2
originy = y+sprite_height/2
if (collision_point(originx+xspeed,originy,obj_floor,0,0))
{
    x += clamp(xspeed,-xspeedmax,xspeedmax);
}
if (collision_point(originx,originy+yspeed,obj_floor,0,0))
{
    y += clamp(yspeed,-yspeedmax,yspeedmax);
}

//Sprite
depth = -y-32;
image_speed = 0;
if (myspeed &gt; 1)
{
    mydir = point_direction(0,0,xspeed,yspeed);
    sprite_index = spr_knight_walk;
    image_index = (floor(mydir+22)/45 mod 8) + (8 * walkframe);
}
else
{
    sprite_index = spr_knight_stand;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (myspeed &gt; 1)
{
    if (walkframe &lt; 2)
    {
        walkframe += 1;
    }
    else
    {
        walkframe = 0;
    }
}
alarm[0] = 6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Movement
var moveUp,moveDown,moveLeft,moveRight;
moveUp = keyboard_check(ord('W'));
moveDown = keyboard_check(ord('S'));
moveLeft = keyboard_check(ord('A'));
moveRight = keyboard_check(ord('D'));
moveUpLeft = moveUp and moveLeft;
moveUpRight = moveUp and moveRight;
moveDownLeft = moveDown and moveLeft;
moveDownRight = moveDown and moveRight;
myspeed = point_distance(0,0,xspeed,yspeed);
if (moveUpLeft)
{
    xspeed -= accel;
    yspeed -= accel;
}
else if (moveUpRight)
{
    xspeed += accel;
    yspeed -= accel;
}
else if (moveDownLeft)
{
    xspeed -= accel;
    yspeed += accel;
}
else if (moveDownRight)
{
    xspeed += accel;
    yspeed += accel;
}
else if (moveUp)
{
    yspeed -= accel;
}
else if (moveDown)
{
    yspeed += accel;
}
else if (moveLeft)
{
    xspeed -= accel;
}
else if (moveRight)
{
    xspeed += accel;
}
else
{
    if (myspeed &lt; 1)
    {
        xspeed = 0;
        yspeed = 0;
    }
}
if not (moveUpLeft or moveUpRight or moveDownLeft or moveDownRight)
{
    xspeed = (xspeed*(fric-1))/fric;
    yspeed = (yspeed*(fric-1))/fric;
}
else
{
    xspeed = (xspeed*((fric-3)-1))/(fric-3);
    yspeed = (yspeed*((fric-3)-1))/(fric-3);
}
var originx,originy;
originx = x+42;
originy = y+52;
var corner1,corner2,corner3,corner4;
corner1 = position_meeting(originx+xspeed-16,originy-16,obj_floor);
corner2 = position_meeting(originx+xspeed+16,originy-16,obj_floor);
corner3 = position_meeting(originx+xspeed+16,originy+16,obj_floor);
corner4 = position_meeting(originx+xspeed-16,originy+16,obj_floor);
var corner11,corner22,corner33,corner44;
corner11 = position_meeting(originx-16,originy+yspeed-16,obj_floor);
corner22 = position_meeting(originx+16,originy+yspeed-16,obj_floor);
corner33 = position_meeting(originx+16,originy+yspeed+16,obj_floor);
corner44 = position_meeting(originx-16,originy+yspeed+16,obj_floor);
if (corner1 and corner2 and corner3 and corner4)
{
    x += clamp(xspeed,-xspeedmax,xspeedmax);
}
if (corner11 and corner22 and corner33 and corner44)
{
    y += clamp(yspeed,-yspeedmax,yspeedmax);
}

//Sprite
depth = -y-32;
image_speed = 0;
if (myspeed &gt; 1)
{
    mydir = point_direction(0,0,xspeed,yspeed);
    sprite_index = spr_knight_walk;
    image_index = (floor(mydir+22)/45 mod 8) + (8 * walkframe);
}
else
{
    sprite_index = spr_knight_stand;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>18,18</point>
  </PhysicsShapePoints>
</object>
