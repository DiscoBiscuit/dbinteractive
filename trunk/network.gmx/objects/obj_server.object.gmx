<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create the gyad dang server

//Gonna use port 27015 because that's what source games use so I know it works, 4 max connections
server = network_create_server(network_socket_tcp,27015,4);

if server &gt;= 0
{
    show_message("server created successfully")
    instance_create(0,0,obj_client)
    //The server is online
};
else
{
    show_message("server failed to create (port closed maybe???)")
    instance_destroy();
    //The port is closed on our router.
};

//Some stuff?? (sending data)
default_buffer = buffer_create(256, buffer_grow, 1); //We have a buffer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Network event on the server side
var eventid = ds_map_find_value(async_load, "id"); //We are searching what data has “id”
//The variable “server” is the return of “network_create_server”
if( server == eventid ) //If that data is our server
{
    //Someone has connected or disconnected from the server
    show_message("Someone connected to the server (Maybe you??)")
}
else
{
    // We have a new packet from a client
    var buff = ds_map_find_value(async_load, "buffer"); //The content of the packet
    var cmd = buffer_read(buff, buffer_u16 ); //The first data of each packet
    var sock = ds_map_find_value(async_load, "id"); //The sender
    switch (cmd) //The first data is telling what we are doing with the rest of the packet
    {
    case CMD_HELLOWORLD:
    var str = buffer_read(buff, buffer_string); //We got the string “Hello”
    show_message("info recieved from client!!")
    break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
