<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dispwidth = display_get_width()
dispheight = display_get_height()
display_set_gui_size(dispwidth, dispheight); 
userwidth = window_get_width()/view_wport
userheight = window_get_height()/view_hport
heartindex = 0
global.drawing = -1
mousestartx = 0
mousestarty = 0
accidentalclose = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Create particle systems</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Heart pop
global.heartpart=part_system_create();

global.heartpart1=part_type_create();
part_type_shape(global.heartpart1,3);
part_type_size(global.heartpart1,0.25,0.40,-0.01,0);
part_type_scale(global.heartpart1,0.25,0.5);
part_type_orientation(global.heartpart1,0,0,0,0,1);
part_type_direction(global.heartpart1,0,360,0,0);
part_type_speed(global.heartpart1,3,4,0,0);
part_type_gravity(global.heartpart1,0,270);
part_type_color3(global.heartpart1,1381653,1381653,1118481);
part_type_alpha3(global.heartpart1,1,1,0);
part_type_blend(global.heartpart1,0);
part_type_life(global.heartpart1,10,10);

//Ouch &amp; fluff particles
global.fluffpart=part_system_create();

global.fluffpart1=part_type_create();
part_type_sprite(global.fluffpart1,spr_particles,0,0,1)
part_type_size(global.fluffpart1,0.5,1,-0.025,0);
part_type_scale(global.fluffpart1,1,1);
part_type_orientation(global.fluffpart1,0,0,0,0,1);
part_type_direction(global.fluffpart1,0,180,0,0);
part_type_speed(global.fluffpart1,2,3,-0.01,0);
part_type_gravity(global.fluffpart1,0,270);
part_type_color3(global.fluffpart1,1381653,1381653,1118481);
//part_type_alpha3(global.fluffpart1,1,1,0);
part_type_blend(global.fluffpart1,0);
part_type_life(global.fluffpart1,20,50);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Gestures</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

// gesture data
gesture_x = ds_list_create();
gesture_y = ds_list_create();
gesture = ds_list_create();
gesture_s = "";

draw_x = ds_list_create(); // EXTRA
draw_y = ds_list_create(); // EXTRA

// is the mouse button held down and previous point coords
tracking = 0;
mx = 0;
my = 0;

g_to_s[0] = "R"; // EXTRA
g_to_s[1] = "U"; // EXTRA
g_to_s[2] = "L"; // EXTRA
g_to_s[3] = "D"; // EXTRA

ges = "Nothing";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_spiderguy){
    gescheck = 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(heartindex &lt; 3){
    heartindex += 0.1
}
else{
    heartindex = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Gestures</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!tracking)
    exit;

// adds the mouse position to the pointlist if it has moved enough
if(point_distance(mx,my,mouse_x,mouse_y) &gt; 10) {
    ds_list_add(gesture_x,mouse_x-mx);
    ds_list_add(gesture_y,mouse_y-my);
    mx = mouse_x;
    my = mouse_y;
    ds_list_add(draw_x,mouse_x); 
    ds_list_add(draw_y,mouse_y); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Gestures</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.drawing == 1 and accidentalclose == 0){
tracking = 0;

var g,i,u,v,d;
g = ds_list_create();

// cut down the mouse movements to cardinal directions (up, down, left, right)
for(i = 0;i &lt; ds_list_size(gesture_x);i += 1) {
    u = ds_list_find_value(gesture_x,i);
    v = ds_list_find_value(gesture_y,i);
    d = round(point_direction(0,0,u,v)/90) mod 4;
    ds_list_add(g,d);
}

// remove consecutive duplicates (e.g. Up, Left, Left, Down becomes Up, Left, Down)
v = -1;
for(i = 0;i &lt; ds_list_size(g);i += 1) {
    u = ds_list_find_value(g,i);
    if(u != v) {
        ds_list_add(gesture,u);
        gesture_s += g_to_s[u];
        v = u;
    }
}

ds_list_destroy(g);

ds_list_add(draw_x,mouse_x); // EXTRA
ds_list_add(draw_y,mouse_y); // EXTRA

// this is all extra, it just selects the spell based on the gesture string
switch(gesture_s) {
    case "DRD":
        ges = "Lightning";
        break;
    case "DRU":
        ges = "Fire";
        break;
    case "U":
        ges = "Magic Missile";
        break;
    case "RULDR":
        ges = "Shield";
        break;
    default:
        ges = "Nothing";
        break;
}
global.drawing = -1
instance_activate_all()
ds_list_clear(gesture_x);
ds_list_clear(gesture_y);
ds_list_clear(gesture);
if(string_length(gesture_s) == 1){
    alarm[0] = 1
}
gesture_s = "";

ds_list_clear(draw_x); 
ds_list_clear(draw_y);
}
if(accidentalclose == 1){
    accidentalclose = 0
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Gestures</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// reset gesture data
if(global.drawing == 1){
ds_list_clear(gesture_x);
ds_list_clear(gesture_y);
ds_list_clear(gesture);
gesture_s = "";

ds_list_clear(draw_x); 
ds_list_clear(draw_y); 

tracking = 1;
mx = mouse_x;
my = mouse_y;

ds_list_add(draw_x,mouse_x); 
ds_list_add(draw_y,mouse_y); }
mousestartx = mouse_x
mousestarty = mouse_y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Virtual keys for touch compatibility

leftbutton = virtual_key_add(0,0,dispwidth/2,dispheight,vk_left)
rightbutton = virtual_key_add(dispwidth/2,0,dispheight/2,dispheight,vk_right)
drawbutton = virtual_key_add(0,dispheight-dispheight/4,dispwidth/7.11,dispheight,vk_space)




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_drawbutton,0,view_xview,view_yview+view_hview)

if(global.p_health&gt;0){
    draw_sprite(spr_heart,heartindex,view_xview,view_yview)
}
if(global.p_health&gt;1){
    draw_sprite(spr_heart,heartindex+2,view_xview+32,view_yview)
}
if(global.p_health&gt;2){
    draw_sprite(spr_heart,heartindex+1,view_xview+64,view_yview)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Gestures</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_control</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.drawing == 1){
    draw_sprite_ext(pausesprite,0,view_xview,view_yview,1/userwidth,1/userheight,0,c_white,1)
}





var l,i;

// draws the mouse trail
draw_primitive_begin(pr_linestrip);

l = ds_list_size(draw_x);
if(l &gt; 1) for(i = 1;i &lt; l;i += 1)
    //draw_vertex_color(ds_list_find_value(draw_x,i),ds_list_find_value(draw_y,i),c_black,1);
    //draw_line_width(ds_list_find_value(draw_x,i-1),ds_list_find_value(draw_y,i-1),ds_list_find_value(draw_x,i),ds_list_find_value(draw_y,i),3)
    draw_sprite_ext(spr_line,0,ds_list_find_value(draw_x,i),ds_list_find_value(draw_y,i),(point_distance(ds_list_find_value(draw_x,i-1),ds_list_find_value(draw_y,i-1),ds_list_find_value(draw_x,i),ds_list_find_value(draw_y,i)))/9,1,point_direction(ds_list_find_value(draw_x,i-1),ds_list_find_value(draw_y,i-1),ds_list_find_value(draw_x,i),ds_list_find_value(draw_y,i)),c_white,1)
draw_primitive_end();

// draws the raw gesture string
draw_text(10,10,gesture_s);

// extra, draws the spell cast
//if(gesture_s != "")
//    draw_text(10,380,"You cast: "+ges);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.drawing = -global.drawing

if(global.drawing == 1){
    pausesprite = sprite_create_from_screen(0,0,view_wview*userwidth,view_hview*userheight,0,0,0,0)
    if(os_type != os_windows)
    {
    accidentalclose = 1
    }
    instance_deactivate_all(true)
}
else{
    accidentalclose = 0
    instance_activate_all()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
