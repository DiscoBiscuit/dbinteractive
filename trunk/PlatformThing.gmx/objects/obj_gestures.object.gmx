<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

// gesture data
gesture_x = ds_list_create();
gesture_y = ds_list_create();
gesture = ds_list_create();
gesture_s = "";

draw_x = ds_list_create(); // EXTRA
draw_y = ds_list_create(); // EXTRA

// is the mouse button held down and previous point coords
tracking = 0;
mx = 0;
my = 0;

g_to_s[0] = "R"; // EXTRA
g_to_s[1] = "U"; // EXTRA
g_to_s[2] = "L"; // EXTRA
g_to_s[3] = "D"; // EXTRA

ges = "Nothing";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!tracking)
    exit;

// adds the mouse position to the pointlist if it has moved enough
if(point_distance(mx,my,mouse_x,mouse_y) &gt; 10) {
    ds_list_add(gesture_x,mouse_x-mx);
    ds_list_add(gesture_y,mouse_y-my);
    mx = mouse_x;
    my = mouse_y;
    ds_list_add(draw_x,mouse_x); 
    ds_list_add(draw_y,mouse_y); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tracking = 0;

var g,i,u,v,d;
g = ds_list_create();

// cut down the mouse movements to cardinal directions (up, down, left, right)
for(i = 0;i &lt; ds_list_size(gesture_x);i += 1) {
    u = ds_list_find_value(gesture_x,i);
    v = ds_list_find_value(gesture_y,i);
    d = round(point_direction(0,0,u,v)/90) mod 4;
    ds_list_add(g,d);
}

// remove consecutive duplicates (e.g. Up, Left, Left, Down becomes Up, Left, Down)
v = -1;
for(i = 0;i &lt; ds_list_size(g);i += 1) {
    u = ds_list_find_value(g,i);
    if(u != v) {
        ds_list_add(gesture,u);
        gesture_s += g_to_s[u];
        v = u;
    }
}

ds_list_destroy(g);

ds_list_add(draw_x,mouse_x); // EXTRA
ds_list_add(draw_y,mouse_y); // EXTRA

// this is all extra, it just selects the spell based on the gesture string
switch(gesture_s) {
    case "DRD":
        ges = "Lightning";
        break;
    case "DRU":
        ges = "Fire";
        break;
    case "U":
        ges = "Magic Missile";
        break;
    case "RULDR":
        ges = "Shield";
        break;
    default:
        ges = "Nothing";
        break;
}

if(global.drawing == 1){
    global.drawing = -1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// reset gesture data
ds_list_clear(gesture_x);
ds_list_clear(gesture_y);
ds_list_clear(gesture);
gesture_s = "";

ds_list_clear(draw_x); 
ds_list_clear(draw_y); 

tracking = 1;
mx = mouse_x;
my = mouse_y;

ds_list_add(draw_x,mouse_x); 
ds_list_add(draw_y,mouse_y); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var l,i;

// draws the mouse trail
draw_primitive_begin(pr_linestrip);

l = ds_list_size(draw_x);
if(l &gt; 1) for(i = 1;i &lt; l;i += 1)
    //draw_vertex_color(ds_list_find_value(draw_x,i),ds_list_find_value(draw_y,i),c_black,1);
    draw_line_width(ds_list_find_value(draw_x,i-1),ds_list_find_value(draw_y,i-1),ds_list_find_value(draw_x,i),ds_list_find_value(draw_y,i),3)
    //draw_sprite_ext(spr_line,0,ds_list_find_value(draw_x,i),ds_list_find_value(draw_y,i),1,1,point_direction(ds_list_find_value(draw_x,i-1),ds_list_find_value(draw_y,i-1),ds_list_find_value(draw_x,i),ds_list_find_value(draw_y,i)),c_white,1)
draw_primitive_end();

// draws the raw gesture string
draw_text(10,10,gesture_s);

// extra, draws the spell cast
//if(gesture_s != "")
//    draw_text(10,380,"You cast: "+ges);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
