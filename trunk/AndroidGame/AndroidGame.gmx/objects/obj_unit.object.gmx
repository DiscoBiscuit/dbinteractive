<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_unit_dgear</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_msk_unit</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set physics and things

unitgravity=0.5
gravity=unitgravity
maxhspeed=5
maxvspeed=8
friction=0.1 //I hate GM's friction but whatever

//Set behavioural variables

isjumping=0 //Is the unit touching the ground?
ismoving=0 //Is the unit moving towards a goal (the unit can still be "moving" or "sliding" with this as 0)
istouchingwall=0 //Is the unit touching a wall on the left or right side
collisiontest=0 //Used for checking if we're on a slope
pushtimeout=0 //Have pushing other units away time out to prevent jittering
istouchingceiling=0 //Ok now you're starting to RUSTLE MY JIMMIES

drawscale = 1
gear_rot = round(random(360))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ismoving==0){
    pushtimeout=1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collision</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Collide with ground

if(instance_place(x,y+gravity+vspeed,obj_world)){
    if(isjumping==1){
        isjumping=0
        gravity=0
        move_contact_solid(direction,vspeed)
        vspeed=0
    }
}
else{
    isjumping=1
    gravity=unitgravity
}

//Ensure slopes work

for(collisiontest=0;collisiontest&lt;8;collisiontest+=1){
    if(speed&gt;0){
        if(place_free(x+hspeed,y-collisiontest)){
            if(isjumping==0){
                y-=collisiontest;
                break;
            }
        }
    }
}
//Collide with wall

if not(place_free(x+hspeed,y-collisiontest)){
    if(instance_place(x+hspeed,y,obj_world)){
        istouchingwall=1
        move_outside_solid(direction+180,2)
        hspeed=0
    }
    else{
        istouchingwall=0
    }
}
else{
    istouchingwall=0
}

//Collide with ceiling
//once more unto the breach

if(isjumping==1){
    if(instance_place(x,y-48+(vspeed/2),obj_world)){
        if(istouchingceiling==0){
            if(vspeed&lt;0){
                vspeed=0
                istouchingceiling=1
            }
        }
    }
    else{
        istouchingceiling=0
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Make sure unit doesn't go faster than it's allowed

if(hspeed&gt;maxhspeed){
    hspeed=maxhspeed
}
if(hspeed&lt;-maxhspeed){
    hspeed=-maxhspeed
}
if(vspeed&gt;maxvspeed){
    vspeed=maxvspeed
}
if(vspeed&lt;-maxvspeed){
    vspeed=-maxvspeed
}

//Move towards mouse

if(mouse_check_button(mb_left)){
    ismoving=1
    pushtimeout=0
    if(istouchingwall==0){
        motion_add(point_direction(x,y,mouse_x,y),0.5)
    }
}
else{
    //Set timer to stop pushing other units away
    if(ismoving==1){
        alarm[0]=120
        ismoving=0
        }
}

//Jump if unit hits a wall low enough to jump over

if(istouchingwall==1 &amp;&amp; istouchingceiling==0){
    if(isjumping=0){
        if not(instance_place(x+(sprite_width),y-32*3.5,obj_world)){
            if(ceil(vspeed)&gt;-0.01){
                motion_add(90,15)
            }
        }
    }
}

//Jump if there's a gap and the mouse ranger is higher than y

if(isjumping==0 &amp;&amp; istouchingceiling==0){
    if not(place_meeting(x+hspeed,y+1,obj_world)){
        if(obj_control.groundy&lt;y){
            motion_add(90,15)
        }
    }
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_unit">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(pushtimeout==0){
    motion_add(point_direction(other.x,y,x,y),0.1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Make the sprite face the direction it's going in

if(hspeed&lt;0){
    image_xscale=-1
}
if(hspeed&gt;0){
    image_xscale=1
}
//Dev stuff --------&gt;

//Draw mask

draw_sprite(spr_msk_unit,0,x,y)

//Draw the collision check for jumping

//draw_circle_color(x+(sprite_width),y-32*3.5,3,c_red,c_red,0)

//Draw the collision check for ceilings

draw_circle_color(x,y-48+(vspeed/2),3,c_blue,c_blue,0)

//Draw the collision check for walls

draw_circle_color(x+hspeed,y,3,c_green,c_green,0)

//Draw the collision check for the ground

draw_circle_color(x,y+gravity+vspeed,3,c_fuchsia,c_fuchsia,0)


//---------&gt;

//--

gear_rot += 10
if gear_rot&gt;360
gear_rot-=360

vel = hspeed

size = abs(image_xscale)

ang = dsin(gear_rot)*10
draw_sprite_ext(spr_unit_leg,0,x,y-24*size,0.5*image_xscale,0.5*size,ang*vel,image_blend,image_alpha)
//draw_sprite_ext(spr_unit_foot,0,x + lengthdir_x(9*size,ang*vel-90),y-24*size  + lengthdir_y(9*size,ang*vel-90),0.5*image_xscale,0.5*size,ang*vel+min(0,dcos(gear_rot+180))*20*vel,image_blend,image_alpha)

draw_sprite_ext(spr_unit_dgear,0,x,y-36*size,0.5*image_xscale,0.5*size,gear_rot*image_xscale/3,image_blend,image_alpha)

ang = dsin(gear_rot+180)*10
draw_sprite_ext(spr_unit_leg,0,x,y-24*size,0.5*image_xscale,0.5*size,ang*vel,image_blend,image_alpha)
//draw_sprite_ext(spr_unit_foot,0,x + lengthdir_x(9*size,ang*vel-90),y-24*size  + lengthdir_y(9*size,ang*vel-90),0.5*image_xscale,0.5*size,ang*vel+min(0,dcos(gear_rot))*20*vel,image_blend,image_alpha)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
