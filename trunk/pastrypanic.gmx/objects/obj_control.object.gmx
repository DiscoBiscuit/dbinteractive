<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

maingrid = ds_grid_create(5,9)
pull = ds_grid_create(5,9)
sprinklegrid = ds_grid_create(5,9)
global.combo = 0
global.streak = -1
scoredrawn = 0
scoredrawscl = 0

//Keyboard selection stuff
keyboardmode = 0
kselx = 0
ksely = 0
isselx = 0
issely = 0
hassel = 0
kswitchdir = 0
to3 = 0

//Csas stuff
csas = 100 //This value starts at 100 and goes down some every time there's bad donuts on the screen
csasdrawn = 100
checkforbaddies = 0
wasabaddie = 0

//Make the background move
background_hspeed[0] = 0.5

//Randomize the donuts at start
for (i=0; i&lt;5; i+=1)
{
    for (j=0; j&lt;9; j+=1)
    {
        ds_grid_set(maingrid,i,j,irandom_range(1,8));
    };
};

alarm[0] = 30
mx = 0
my = 0
globalvar deldonutx,deldonuty;
donutq[0] = 0
donutq[1] = 0
donutq[2] = 0
donutq[3] = 0
donutq[4] = 0

donutspr[1] = spr_donut1
donutspr[2] = spr_donut2
donutspr[3] = spr_donut3
donutspr[4] = spr_donut4
donutspr[5] = spr_donut5
donutspr[6] = spr_donut6
donutspr[7] = spr_donut7
donutspr[8] = spr_donut8
donutspr[9] = spr_donut9
donutspr[10] = spr_donut10

for (k=0; k&lt;5; k+=1)
{
    for (l=0; l&lt;9; l+=1)
    {
        scr_match(k,l);
    };
};

//Sounds
audio_sound_gain(snd_swipe,0.4,0)
audio_sound_gain(snd_swipe,0.4,0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not (instance_exists(obj_donut_matcheffect))
{
    global.streak = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_match,0,0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var randy;

if not (instance_exists(obj_donut_switch))
{
if (ds_grid_get(maingrid,0,0) == 0)
{
    with(instance_create(0,-128,obj_donut_fall))
    {
        bonus = choose(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1)
        randy = irandom_range(0,32)
        if (randy == 16)
        {
            bad = 1
        }
        image_index = irandom_range(1,8)
    }
};
if (ds_grid_get(maingrid,1,0) == 0)
{
    with(instance_create(sprite_get_width(spr_donut),-128,obj_donut_fall))
    {
        bonus = choose(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1)
        randy = irandom_range(0,32)
        if (randy == 16)
        {
            bad = 1
        }
        image_index = irandom_range(1,8)
    }
};
if (ds_grid_get(maingrid,2,0) == 0)
{
    with(instance_create((sprite_get_width(spr_donut)*2),-128,obj_donut_fall))
    {
        bonus = choose(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1)
        randy = irandom_range(0,32)
        if (randy == 16)
        {
            bad = 1
        }
        image_index = irandom_range(1,8)
    }
};
if (ds_grid_get(maingrid,3,0) == 0)
{
    with(instance_create((sprite_get_width(spr_donut)*3),-128,obj_donut_fall))
    {
        bonus = choose(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1)
        randy = irandom_range(0,32)
        if (randy == 16)
        {
            bad = 1
        }
        image_index = irandom_range(1,8)
    }
};
if (ds_grid_get(maingrid,4,0) == 0)
{
    with(instance_create((sprite_get_width(spr_donut)*4),-128,obj_donut_fall))
    {
        bonus = choose(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1)
        randy = irandom_range(0,32)
        if (randy == 16)
        {
            bad = 1
        }
        image_index = irandom_range(1,8)
    }
};
};
alarm[0] = 15
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=0; i&lt;5; i+=1)
{
    for (j=0; j&lt;8; j+=1)
    {
        if (ds_grid_get(maingrid,i,j+1) == 0 and ds_grid_get(maingrid,i,j) != 0 and not instance_exists(obj_donut_switch))
        {
            //ds_grid_set(maingrid,i,j+1,ds_grid_get(maingrid,i,j))
            with(instance_create(i*sprite_get_width(spr_donut),j*sprite_get_height(spr_donut),obj_donut_fall))
            {
                if (ds_grid_get(obj_control.sprinklegrid,obj_control.i,obj_control.j) == 1)
                {
                    bonus = 1
                }
                image_index = ds_grid_get(obj_control.maingrid,obj_control.i,obj_control.j)
            }
            ds_grid_set(sprinklegrid,i,j,0)
            ds_grid_set(maingrid,i,j,0)
            //donutq[i] += 1
            
        }
    };
};

//Make the view scroll up
if (view_yview &gt; 0)
{
    view_yview = (view_yview * 14 + -8) / 15
}

//Keyboard button (or gamepad) selections
if (keyboard_check_pressed(vk_left) and kselx &gt; 0 and hassel == 0)
{
    if (hassel == 0)
    {
        keyboardmode = 1
        kselx -= 1
    }
        kswitchmode = 2
}
if (keyboard_check_pressed(vk_right) and kselx &lt; 4 and hassel == 0)
{
    if (hassel == 0)
    {
        keyboardmode = 1
        kselx += 1
    }
        kswitchmode = 0
}
if (keyboard_check_pressed(vk_up) and ksely &gt; 0)
{
    if (hassel == 0)
    {
        keyboardmode = 1
        ksely -= 1
    }
        kswitchmode = 1
}
if (keyboard_check_pressed(vk_down) and  ksely &lt; 8 and hassel == 0)
{
    if (hassel == 0)
    {
        keyboardmode = 1
        ksely += 1
    }
        kswitchmode = 3
}
if (to3 &lt; 3)
{
    to3 += 1
}
else{
    to3 = 0
}
if (keyboard_check_pressed(vk_space) and hassel == 0)
{
    keyboardmode = 1
    isselx = kselx
    issely = ksely
    hassel = 1
}
if ((keyboard_check_pressed(vk_left) or keyboard_check_pressed(vk_right) or keyboard_check_pressed(vk_up) or keyboard_check_pressed(vk_down)) and hassel == 1)
{
    switch (keyboard_key)
    {
        case vk_right:
        kswitchmode = 0;
        break;
        case vk_up:
        kswitchmode = 1;
        break;
        case vk_left:
        kswitchmode = 2;
        break;
        case vk_down:
        kswitchmode = 3;
        break;
    }
     
    event_perform(ev_mouse,ev_global_left_release)
    hassel = 0
}

//Check for bad donuts and deduct the csas appropriately
if not(instance_exists(obj_donut_switch) or instance_exists(obj_donut_fall)) and (checkforbaddies == 1)
{
    for (i=0; i&lt;5; i+=1)
    {
        for (j=0; j&lt;8; j+=1)
        {
            if (ds_grid_get(maingrid,i,j) == 9)
            {
                if (csas &gt; 0)
                {
                    csas -= 1
                }
                wasabaddie = 1
            }
        }
    }
    if (wasabaddie == 0 and csas &lt; 95)
    {
        //csas += 5
    }
    else
    {
        wasabaddie = 0
    }
    checkforbaddies = 0
}

//Smooth the csas bar
if (csasdrawn != csas)
{
    csasdrawn = (csasdrawn * 5 + csas) / 6
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//I apologize in advance if you're going to try to make sense of this page

var mousedir,donutswitch,donutswitch2,donutsx,donutsy;
if (keyboardmode == 0)
{
    donutsx = floor(mx/64)
    donutsy = floor(my/64)
    mousedir = round(point_direction(mx,my,mouse_x-20,mouse_y)/90) mod 4;
}
else
{
    donutsx = kselx
    donutsy = ksely
    //mousedir = round(point_direction(isselx,issely,kselx,ksely)/90) mod 4;
    mousedir = kswitchmode
}

if(point_distance(mx,my,mouse_x-20,mouse_y)&gt;10 and not (instance_exists(obj_donut_switch)) and not (instance_exists(obj_donut_fall))){
//right
if (mousedir == 0)
{
    donutswitch = ds_grid_get(maingrid,donutsx,donutsy);
    donutswitch2 = ds_grid_get(maingrid,donutsx+1,donutsy);
    /*
    if( donutswitch2 != 0 and donutswitch != 0){
        ds_grid_set(maingrid,donutsx+1,donutsy,donutswitch)
        ds_grid_set(maingrid,donutsx,donutsy,donutswitch2)
        scr_match(donutsx+1,donutsy)
    };
    */
    if (donutswitch != 0 and donutswitch2 != 0 and donutswitch != 9 and donutswitch2 != 9)
    {
    with (instance_create(ds_grid_value_x(maingrid,donutsx,donutsy,donutsx,donutsy,donutswitch)*64,ds_grid_value_y(maingrid,donutsx,donutsy,donutsx,donutsy,donutswitch)*64,obj_donut_switch))
    {
        image_index = donutswitch;
        sdir = 0
    };
    with (instance_create(ds_grid_value_x(maingrid,donutsx,donutsy,donutsx,donutsy,donutswitch)*64+64,ds_grid_value_y(maingrid,donutsx,donutsy,donutsx,donutsy,donutswitch)*64,obj_donut_switch))
    {
        image_index = donutswitch2;
        sdir = 180
    };
    ds_grid_set(maingrid,donutsx,donutsy,0)
    ds_grid_set(maingrid,donutsx+1,donutsy,0)
    ds_grid_set(sprinklegrid,donutsx,donutsy,0)
    ds_grid_set(sprinklegrid,donutsx+1,donutsy,0)
};}
//up
if (mousedir == 1)
{
        donutswitch = ds_grid_get(maingrid,donutsx,donutsy);
        donutswitch2 = ds_grid_get(maingrid,donutsx,donutsy-1);
    /*
    if( donutswitch2 != 0 and donutswitch != 0){
        ds_grid_set(maingrid,donutsx,donutsy-1,donutswitch)
        ds_grid_set(maingrid,donutsx,donutsy,donutswitch2)
        scr_match(donutsx,donutsy-1)
    }
    */
    if (donutswitch != 0 and donutswitch2 != 0 and donutswitch != 9 and donutswitch2 != 9)
    {
    with (instance_create(ds_grid_value_x(maingrid,donutsx,donutsy,donutsx,donutsy,donutswitch)*64,ds_grid_value_y(maingrid,donutsx,donutsy,donutsx,donutsy,donutswitch)*64,obj_donut_switch))
    {
        image_index = donutswitch;
        sdir = 90
    };
    with (instance_create(ds_grid_value_x(maingrid,donutsx,donutsy,donutsx,donutsy,donutswitch)*64,ds_grid_value_y(maingrid,donutsx,donutsy,donutsx,donutsy,donutswitch)*64-64,obj_donut_switch))
    {
        image_index = donutswitch2;
        sdir = 270
    };
    ds_grid_set(maingrid,donutsx,donutsy,0)
    ds_grid_set(maingrid,donutsx,donutsy-1,0)
    ds_grid_set(sprinklegrid,donutsx,donutsy,0)
    ds_grid_set(sprinklegrid,donutsx,donutsy-1,0)
};}
//left
if (mousedir == 2)
{
        donutswitch = ds_grid_get(maingrid,donutsx,donutsy);
        donutswitch2 = ds_grid_get(maingrid,donutsx-1,donutsy);
    /*
    if( donutswitch2 != 0 and donutswitch != 0){
        ds_grid_set(maingrid,donutsx-1,donutsy,donutswitch)
        ds_grid_set(maingrid,donutsx,donutsy,donutswitch2)
        scr_match(donutsx-1,donutsy)
    }
    */
    if (donutswitch != 0 and donutswitch2 != 0 and donutswitch != 9 and donutswitch2 != 9)
    {
    with (instance_create(ds_grid_value_x(maingrid,donutsx,donutsy,donutsx,donutsy,donutswitch)*64,ds_grid_value_y(maingrid,donutsx,donutsy,donutsx,donutsy,donutswitch)*64,obj_donut_switch))
    {
        image_index = donutswitch;
        sdir = 180
    };
    with (instance_create(ds_grid_value_x(maingrid,donutsx,donutsy,donutsx,donutsy,donutswitch)*64-64,ds_grid_value_y(maingrid,donutsx,donutsy,donutsx,donutsy,donutswitch)*64,obj_donut_switch))
    {
        image_index = donutswitch2;
        sdir = 0
    };
    ds_grid_set(maingrid,donutsx,donutsy,0)
    ds_grid_set(maingrid,donutsx-1,donutsy,0)
    ds_grid_set(sprinklegrid,donutsx,donutsy,0)
    ds_grid_set(sprinklegrid,donutsx-1,donutsy,0)
};}
//down
if (mousedir == 3)
{
        donutswitch = ds_grid_get(maingrid,donutsx,donutsy);
        donutswitch2 = ds_grid_get(maingrid,donutsx,donutsy+1);
    /*
    if( donutswitch2 != 0 and donutswitch != 0){
        ds_grid_set(maingrid,donutsx,donutsy+1,donutswitch)
        ds_grid_set(maingrid,donutsx,donutsy,donutswitch2)
        scr_match(donutsx,donutsy+1)
    }
    */
    if (donutswitch != 0 and donutswitch2 != 0 and donutswitch != 9 and donutswitch2 != 9)
    {
    with (instance_create(ds_grid_value_x(maingrid,donutsx,donutsy,donutsx,donutsy,donutswitch)*64,ds_grid_value_y(maingrid,donutsx,donutsy,donutsx,donutsy,donutswitch)*64,obj_donut_switch))
    {
        image_index = donutswitch;
        sdir = 270
    };
    with (instance_create(ds_grid_value_x(maingrid,donutsx,donutsy,donutsx,donutsy,donutswitch)*64,ds_grid_value_y(maingrid,donutsx,donutsy,donutsx,donutsy,donutswitch)*64+64,obj_donut_switch))
    {
        image_index = donutswitch2;
        sdir = 90
    };
    ds_grid_set(maingrid,donutsx,donutsy,0)
    ds_grid_set(maingrid,donutsx,donutsy+1,0)
    ds_grid_set(sprinklegrid,donutsx,donutsy,0)
    ds_grid_set(sprinklegrid,donutsx,donutsy+1,0)
};}
audio_sound_pitch(snd_swipe,random_range(0.8,1.25))
audio_sound_gain(snd_swipe,0.25,0)
audio_play_sound(snd_swipe,0,0)
scr_match(donutsx,donutsy)
//global.streak += 1
global.combo = 1
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyboardmode = 0
mx = mouse_x-20
my = mouse_y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var borderblue,borderblue2,borderorange;
borderblue = make_color_rgb(178,212,255)
borderblue2 = make_color_rgb(128,162,205)
borderorange = c_orange
draw_set_color(borderblue)
draw_rectangle(20,0,room_width-20,room_height-64,0)
for (i=0; i&lt;5; i+=1)
{
    for (j=0; j&lt;9; j+=1)
    {
       draw_sprite(spr_donut,ds_grid_get(maingrid,i,j),sprite_get_width(spr_donut)*i+20,sprite_get_height(spr_donut)*j)
       draw_sprite(spr_sprinkles,ds_grid_get(sprinklegrid,i,j),sprite_get_width(spr_donut)*i+20,sprite_get_height(spr_donut)*j)
    };
};

draw_set_color(borderblue2)
draw_rectangle(20,room_height-64,room_width-20,-4,1)
draw_set_halign(fa_center)
draw_set_valign(fa_middle)
draw_set_font(fnt_score)
draw_set_color(borderorange)
draw_set_alpha(scoredrawscl)
draw_text_transformed(room_width/2,room_height-32,scoredrawn,1+scoredrawscl,1+scoredrawscl/2,0)
scoredrawscl = scoredrawscl*0.95
draw_set_alpha(1)
scr_text_outline(scoredrawn,room_width/2,room_height-32,borderorange,make_color_rgb(255,125,0))
//Draw streak
draw_set_halign(fa_right)
draw_set_font(fnt_streak)
scr_text_outline(string("+")+string(global.streak),room_width-16,room_height-32,borderorange,make_color_rgb(255,125,0))
draw_set_halign(fa_left)

//Draw csas bar
draw_set_color(c_gray)
draw_rectangle(room_width-16,0,room_width-4,room_height-64,0)
draw_set_color(make_color_rgb(0,255,100))
draw_rectangle(room_width-15,(room_height-64)-(csasdrawn*5.76)+1,room_width-5,room_height-65,0)
draw_sprite(spr_csas,0,room_width-26,room_height-90)


if (keyboardmode == 1)
{
    draw_sprite(spr_sel,to3,sprite_get_width(spr_donut)*kselx+20,sprite_get_height(spr_donut)*ksely)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
